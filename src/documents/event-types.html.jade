---
name: 'event-types'
title: 'Event types'
layout: 'default'
withExamples: false
withTOC: true
---

-// load JSON file
- var directoryFile = 'event-types/event-types.staging.json'
- var content = require('files/' + directoryFile)
- var extraFile = 'event-types/event-types.staging.json'
- var extra = require('files/' + extraFile)

-// process file

-// money
- var classes = content.classes;
- var money = classes.money;
- delete classes['money'];

-// measures get all "number only classes"
- var measures = {}
- var classNames = Object.keys(classes);
each className in classNames
  - var classDef = classes[className]
  - var numberOnly = true

  each formatName in Object.keys(classDef.formats)
    - var formatDef = classDef.formats[formatName]
    if formatDef.type !== 'number'
      - numberOnly = false
      - break

  if numberOnly
    - measures[className] = classDef
    - delete classes[className]


.version Directory version: <strong>#{content.version}</strong>

section#about
  h1 Event types
  :markdown
    This is the reference for the standard event types we recommend and handle (or will
    handle) in the Pryv apps. You are free to use any type in your app, but for the sake of
    interoperability we heavily recommend that you stick to the standard types listed here,
    and <a href="mailto:developers@pryv.com">get in touch with us</a> to complete the
    directory if you don't find what you need.

    ## Event type?

    Each event has a `type` property that indicates how to handle its `value` (if any).
    The type itself is a combination of a **class** and a **format** (see also the [event
    data structure in the API reference](reference.html#data-structure-event)):

    - The type's class (`type.class`) specifies the "nature" or "kind" of data represented
      by the event. Events of the same class are assumed to be comparable and convertible,
      and will likely be displayed similarly.
    - The type's format (`type.format`) specifies how the data is structured. For example, a
      text note may just be a single string value, while an HTML note may be a more complex
      object structure.

    Class and format are always specified in lowercase.

    **Shorthand notation**: we usually refer to types with the notation
    "**{class}:{format}**" (e.g. "note:html").

    ## Format specification

    For each of the types described below, the event value's structure is specified using
    JSON-schema (see the
    [JSON-schema specification](http://tools.ietf.org/html/draft-zyp-json-schema-03#page-8)).

    Notes:

    - A "null" value type means that the event has no `value` property (usually because the
      event's core properties are sufficient to carry the necessary information).
    - Any value type other than "null" implies that the event must have a `value` property
      of the specified JSON-schema type.
    - If the value is an object, its (sub-)properties are assumed to be optional unless
      otherwise specified by JSON-schema's "required" field.

    ## JSON file

    This directory is available as a [JSON file](!{directoryFile}) for automated
    processing. We use it in our API for validating event values (for standard types).

    ## Submitting new types to the directory

    This directory is constantly evolving to match the needs of Pryv apps; if you'd like it
    to include other types, please just <a href="mailto:developers@pryv.com">send us your
    proposal</a>.

section#directory
  h1 Directory (no numeric)

  mixin renderProperties(obj, isPropertyList)
    ul
      each key in Object.keys(obj)
        - var value = obj[key]
        li
          - var keyElt = isPropertyList ? 'code' : 'strong'
          | <!{keyElt}>!{key}</!{keyElt}>:!{' '}
          case typeof value
            when 'object'
              mixin renderProperties(value, key === 'properties')
            when 'array'
              | !{value.join(', ')}
            default
              | !{value}

  for className in Object.keys(classes)
    - var classDef = classes[className]
    h2 <code>!{className}</code>
    .description !{classDef.description}
    - var headers = []
    for formatName in Object.keys(classDef.formats)
      - var formatDef = classDef.formats[formatName]
        for formatField in Object.keys(formatDef)
          - headers.push(formatField)
    - headers = headers.filter(function(el,i,a){if(i==a.indexOf(el))return 1;return 0})
    - headers.sort(function(a,b){if(a==='description')return -1;if(a==='type')return -1;return a.localeCompare(b);})
    table.table
      thead
        tr
          -// format id column.
          th format
          each header in headers
            if header !== 'properties' && header !== 'example'
              -// other custom columns.
              th= header
      tbody
        for formatName in Object.keys(classDef.formats)
          - var formatDef = classDef.formats[formatName]
          - var properties = formatDef['properties']
          - var example = formatDef['example']
          - var type = formatDef['type']
          - var rowSpan = 1 + (properties ? 1 : 0) + (example ? 1 : 0)
          - var colSpan = headers.length - (properties ? 1 : 0) - (example ? 1 : 0)

          tr
            -// format id column.
            td(rowspan=rowSpan) <code>!{className}/!{formatName}</code>
            each header in headers
              -// other custom columns.
              - var value = formatDef[header]
              if header !== 'properties' && header !== 'example'
                if header === 'pattern' && value
                  td <code>!{value}</code>
                else
                  td !{value}
            if properties
              tr
                td(colspan=colSpan)
                  strong properties
                  mixin renderProperties(properties, true)
            if example
              tr
                td(colspan=colSpan)
                  strong example
                  pre.example
                    code= JSON.stringify(example, null, 2)


  h1 Directory Measures

  for className in Object.keys(measures)
    - var classDef = measures[className]
    h2 <code>!{className}</code>
    .description !{classDef.description}

    table.table2
      thead
        tr
          -// format id column.
          th format
          th title

      tbody
        for formatName in Object.keys(classDef.formats)
          - var formatDef = classDef.formats[formatName]
          - var formatDescription = formatDef.description
          tr
            -// format id column.
            td <code>!{className}/!{formatName}</code>
            td !{formatDescription}




  h1 Money
  - console.log(money)
  .description !{money.description} <br> Value is a <code>Number</code>

  table.table2
    thead
      tr
        -// format id column.
        th format
        th title

    tbody
      for formatName in Object.keys(money.formats)
        - var formatDef = money.formats[formatName]
        - var formatDescription = formatDef.description
        tr
          -// format id column.
          td <code>money/!{formatName}</code>
          td !{formatDescription}