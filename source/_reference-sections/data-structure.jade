// TODO: REMOVE THIS (this section is now defined in api-server/docs)
h1 Data structure
.intro
  :markdown
    This section describes the structure of the different types of objects and values exchanged in the API.

    Notes:

    - "Read-only" = server-assigned, never set or modified by clients
    - We should and will reformat items structure for quick visual parsing (e.g. using tables, or at least coloured labels for stuff like "optional")—for the moment we've consciously chosen low-formatting, quick-to-edit bullet lists

section
  h2 <a id="data-structure-event"></a>Event
  .content
    :markdown
      See also: [core concepts](concepts.html#core-events).

    table.definitions
      tr
        th: :markdown
          `id`
        td: :markdown
          <span class="type">[identity](#data-structure-identity)</span>
          <span class="label unique">unique</span>
          <span class="label read-only">read-only</span><br>
          The server-assigned identifier for the event.
      tr
        th: :markdown
          `streamId`
        td: :markdown
          <span class="type">[identity](#data-structure-identity)</span><br>
          The id of the belonging stream.
      tr
        th: :markdown
          `time`
        td: :markdown
          <span class="type">[timestamp](#data-structure-timestamp)</span><br>
          The event's time. For period events, this is the time the event started.
      tr
        th: :markdown
          `duration`
        td: :markdown
          <span class="type">[timestamp](#data-structure-timestamp) difference</span>
          <span class="label optional">optional</span><br>
          If present, indicates that the event is a period event. **Running period events have a duration set to `null`**. (We use a dedicated field for duration—instead of using the `content` field—as we do specific processing of event durations, intervals and overlapping.)
      tr
        th: :markdown
          `type`
        td: :markdown
          <span class="type">string</span><br>
          The type of the event. See the [event type directory](event-typez.html#directory) for a list of standard types.
      tr
        th: :markdown
          `content`
        td: :markdown
          <span class="type">any type</span>
          <span class="label optional">optional</span><br>
          The `type`-specific content of the event, if any.
      tr
        th: :markdown
          `tags`
        td: :markdown
          <span class="type">array of strings</span>
          <span class="label optional">optional</span> (always present in read items)<br>
          The tags associated with the event.
      tr
        th: :markdown
          `references`
        td: :markdown
          <span class="type">array of [identity](#data-structure-identity)</span>
          <span class="label optional">optional</span> (always present in read items)<br>
          Other events associated with the event. *Note: event references aren't yet implemented in the API today.*
      tr
        th: :markdown
          `description`
        td: :markdown
          <span class="type">string</span>
          <span class="label optional">optional</span><br>
          User description or comment for the event.
      tr
        th: :markdown
          `attachments`
        td
          :markdown
            <span class="type">array of file attachments</span>
            <span class="label optional">optional</span>
            <span class="label read-only">read-only</span><br>
            An array describing the files attached to the event. Each item has the following structure:

          table.definitions
            tr
              th: :markdown
                `id`
              td: :markdown
                <span class="type">[identity](#data-structure-identity)</span><br>
                The file's id. The attached file's URL is obtained by appending this id to the event's resource URL.
            tr
              th: :markdown
                `fileName`
              td: :markdown
                <span class="type">string</span><br>
                The file's name as uploaded.
            tr
              th: :markdown
                `type`
              td: :markdown
                <span class="type">string</span><br>
                The MIME type of the file.
            tr
              th: :markdown
                `size`
              td: :markdown
                <span class="type">number</span><br>
                The size of the file, in bytes.
      tr
        th: :markdown
          `clientData`
        td: :markdown
          <span class="type">[additional item data](#data-structure-additional-data)</span>
          <span class="label optional">optional</span><br>
          Additional client data for the event.
      tr
        th: :markdown
          `trashed`
        td: :markdown
          <span class="type">boolean</span>
          <span class="label optional">optional</span><br>
          `true` if the event is in the trash.
      tr
        th: :markdown
          `created`
        td: :markdown
          <span class="type">[timestamp](#data-structure-timestamp)</span>
          <span class="label read-only">read-only</span><br>
          The time the event was created.
      tr
        th: :markdown
          `createdBy`
        td: :markdown
          <span class="type">[identity](#data-structure-identity)</span>
          <span class="label read-only">read-only</span><br>
          The id of the access used to create the event.
      tr
        th: :markdown
          `modified`
        td: :markdown
          <span class="type">[timestamp](#data-structure-timestamp)</span>
          <span class="label read-only">read-only</span><br>
          The time the event was last modified.
      tr
        th: :markdown
          `modifiedBy`
        td: :markdown
          <span class="type">[identity](#data-structure-identity)</span>
          <span class="label read-only">read-only</span><br>
          The id of the last access used to modify the event.

  aside
    :markdown
      #### Example (TODO: update)

      ```javascript
      [
        { "time": 1350365877.359, "description" : "Some pics", "id" : "event_0", "streamId" : null,
          "tags": ["foraging", "funny"],
          "type": "picture/attached",
          "attachments" : {
            "Gina": { "fileName": "gina.jpeg", "type": "image/jpeg", "size": 1236701 },
            "Enzo": { "fileName": "enzo.jpeg", "type": "image/jpeg", "size": 1127465 }},
          "modified" : 1350463077.359 },
        { "time" : 1350369477.359, "duration" : 7140, "description": "A period of work",
          "id" : "event_1", "streamId" : "free-veggies",
          "tags": ["proposal"],
          "type": "activity/pryv",
          "modified" : 1350369477.359 },
        { "time" : 1350373077.359, "description" : "A position", "id" : "event_2", "streamId" : null,
          "tags": [],
          "type": "position/wgs84",
          "content": { "latitude": 40.714728, "longitude": -73.998672 },
          "modified" : 1350373077.359 }
      ]
      ```

section
  h2 <a id="data-structure-stream"></a>Stream
  .content
    :markdown
      See also: [core concepts](concepts.html#core-streams).

    table.definitions
      tr
        th: :markdown
          `id`
        td: :markdown
          <span class="type">[identity](#data-structure-identity)</span>
          <span class="label unique">unique</span>
          <span class="label read-only">read-only</span> (except at creation)<br>
          The identifier for the stream. Automatically generated if not set when creating the stream; **slugified if necessary**.
      tr
        th: :markdown
          `name`
        td: :markdown
          <span class="type">string</span><br>
          A name identifying the stream for users. The name must be unique among the stream's siblings in the streams tree structure.
      tr
        th: :markdown
          `parentId`
        td: :markdown
          <span class="type">[identity](#data-structure-identity)</span>
          <span class="label optional">optional</span><br>
          The identifier of the stream's parent, if any. A value of `null` indicates that the stream has no parent (i.e. root stream).
      tr
        th: :markdown
          `singleActivity`
        td: :markdown
          <span class="type">boolean</span>
          <span class="label optional">optional</span><br>
          If specified and `true`, the system will ensure that period events in this stream and its children never overlap.
      tr
        th: :markdown
          `clientData`
        td: :markdown
          <span class="type">[item additional data](#data-structure-additional-data)</span>
          <span class="label optional">optional</span><br>
          Additional client data for the stream.
      tr
        th: :markdown
          `children`
        td: :markdown
          <span class="type">array of streams</span>
          <span class="label read-only">read-only</span><br>
          The stream's sub-streams, if any. This field cannot be set in requests creating a new streams: streams are created individually by design.
      tr
        th: :markdown
          `trashed`
        td: :markdown
          <span class="type">boolean</span>
          <span class="label optional">optional</span><br>
          `true` if the stream is in the trash.
      tr
        th: :markdown
          `created`
        td: :markdown
          <span class="type">[timestamp](#data-structure-timestamp)</span>
          <span class="label read-only">read-only</span><br>
          The time the stream was created.
      tr
        th: :markdown
          `createdBy`
        td: :markdown
          <span class="type">[identity](#data-structure-identity)</span>
          <span class="label read-only">read-only</span><br>
          The id of the access used to create the stream.
      tr
        th: :markdown
          `modified`
        td: :markdown
          <span class="type">[timestamp](#data-structure-timestamp)</span>
          <span class="label read-only">read-only</span><br>
          The time the stream was last modified.
      tr
        th: :markdown
          `modifiedBy`
        td: :markdown
          <span class="type">[identity](#data-structure-identity)</span>
          <span class="label read-only">read-only</span><br>
          The id of the last access used to modify the stream.

  aside
    :markdown
      #### Example (TODO: update)

      A stream structure for activities:

      ```javascript
      [
        { "name": "Sport", "id": "sport", "parentId": null,
          "children": [
            { "name": "Jogging", "id": "jogging", "parentId": "sport", "children": [] },
            { "name": "Bicycling", "id": "bicycling", "parentId": "sport", "children": [] }
        ]},
        { "name": "Work", "id": "work", "parentId": null,
          "children": [
            { "name": "Noble Works Co.", "id": "noble-works","parentId": "work", "children": [
                { "name": "Last Be First", "id": "last-be-first","parentId": "noble-works", "children": [] },
                { "name": "Big Tree", "id": "big-tree","parentId": "noble-works", "children": [] },
                { "name": "Inner Light", "id": "inner-light","parentId": "noble-works", "children": [] }
            ]},
            { "name": "Freelancing", "id": "freelancing","parentId": "work", "children": [
                { "name": "Funky Veggies", "id": "funky-veggies","parentId": "freelancing", "children": [] },
                { "name": "Jojo Lapin & sons", "id": "jojo-lapin","parentId": "freelancing", "children": [] }
            ]}
          ]
        }
      ];
      ```

section
  h2 <a id="data-structure-tag"></a>Tag
  .content
    :markdown
      Tags can be plain text or typed tags; this describes the latter. See also: [core concepts](concepts.html#core-tags).
      *Note: typed tags aren't yet implemented in the API today.*

    table.definitions
      tr
        th: :markdown
          `id`
        td: :markdown
          <span class="type">[identity](#data-structure-identity)</span>
          <span class="label unique">unique</span>
          <span class="label read-only">read-only</span><br>
          The identifier for the tag.
      tr
        th: :markdown
          `type`
        td: :markdown
          <span class="type">string</span><br>
          The type of the tag. See the [tag type directory](#TODO) for a list of standard types.
      tr
        th: :markdown
          `content`
        td: :markdown
          <span class="type">any type</span>
          <span class="label optional">optional</span><br>
          The `type`-specific content of the tag, if any.
      tr
        th: :markdown
          `clientData`
        td: :markdown
          <span class="type">[additional item data](#data-structure-additional-data)</span>
          <span class="label optional">optional</span><br>
          Additional client data for the tag.
      tr
        th: :markdown
          `trashed`
        td: :markdown
          <span class="type">boolean</span>
          <span class="label optional">optional</span><br>
          `true` if the tag is in the trash.
      tr
        th: :markdown
          `created`
        td: :markdown
          <span class="type">[timestamp](#data-structure-timestamp)</span>
          <span class="label read-only">read-only</span><br>
          The time the tag was created.
      tr
        th: :markdown
          `createdBy`
        td: :markdown
          <span class="type">[identity](#data-structure-identity)</span>
          <span class="label read-only">read-only</span><br>
          The id of the access used to create the tag.
      tr
        th: :markdown
          `modified`
        td: :markdown
          <span class="type">[timestamp](#data-structure-timestamp)</span>
          <span class="label read-only">read-only</span><br>
          The time the tag was last modified.
      tr
        th: :markdown
          `modifiedBy`
        td: :markdown
          <span class="type">[identity](#data-structure-identity)</span>
          <span class="label read-only">read-only</span><br>
          The id of the last access used to modify the tag.
  aside
    :markdown
      TODO: example

section
  h2 <a id="data-structure-access"></a>Access
  .content
    :markdown
      See also: [core concepts](concepts.html#core-accesses).

    table.definitions
      tr
        th: :markdown
          `id`
        td: :markdown
          <span class="type">[identity](#data-structure-identity)</span>
          <span class="label unique">unique</span>
          <span class="label read-only">read-only</span><br>
          The identifier for the access.
      tr
        th: :markdown
          `token`
        td: :markdown
          <span class="type">string</span>
          <span class="label unique">unique</span>
          <span class="label read-only">read-only</span> (except at creation)<br>
          The token identifying the access. Automatically generated if not set when creating the access; **slugified if necessary**.
      tr
        th: :markdown
          `type`
        td: :markdown
          <span class="type">`"personal"`|`"app"`|`"shared"`</span>
          <span class="label optional">optional</span><br>
          The type — or usage — of the access. Default: `"shared"`.
      tr
        th: :markdown
          `name`
        td: :markdown
          <span class="type">string</span>
          <span class="label unique">unique</span> *per type and device name (if defined)*<br>
          The name identifying the access for the user. (Note that for personal and app access, the name is used as a technical identifier and not shown as-is to the user.)
      tr
        th: :markdown
          `deviceName`
        td: :markdown
          <span class="type">string</span>
          <span class="label optional">optional</span>
          <span class="label unique">unique</span> *per type and name (if defined)*<br>
          For app accesses only. The name of the client device running the app, if applicable.
      tr
        th: :markdown
          `permissions`
        td
          :markdown
            <span class="type">array of permission objects</span><br>
            Ignored for personal accesses. Shared accesses are only granted access to activity data objects listed in here. Each permission object has the following structure:

          table.definitions
            tr
              th: :markdown
                `streamId`
              td: :markdown
                <span class="type">[identity](#data-structure-identity)</span><br>
                The accessible stream's id, or `"*"` for "all streams". If the stream has child streams, they will be accessible too.
            tr
              th: :markdown
                `level`
              td: :markdown
                <span class="type">`"read"`|`"contribute"`|`"manage"`</span><br>
                The level of access to the stream. With `"contribute"`, the access's token holder(s) can see and record events for the stream (and its child streams, if any); with `"manage"`, the access's token holder(s) can in addition create, modify and delete child streams.
      tr
        th: :markdown
          `created`
        td: :markdown
          <span class="type">[timestamp](#data-structure-timestamp)</span>
          <span class="label read-only">read-only</span><br>
          The time the access was created.
      tr
        th: :markdown
          `createdBy`
        td: :markdown
          <span class="type">[identity](#data-structure-identity)</span>
          <span class="label read-only">read-only</span><br>
          The id of the access used to create this access.
      tr
        th: :markdown
          `modified`
        td: :markdown
          <span class="type">[timestamp](#data-structure-timestamp)</span>
          <span class="label read-only">read-only</span><br>
          The time the access was last modified.
      tr
        th: :markdown
          `modifiedBy`
        td: :markdown
          <span class="type">[identity](#data-structure-identity)</span>
          <span class="label read-only">read-only</span><br>
          The id of the last access used to modify this access.

    :markdown
      A note about permissions: if the access defines conflicting permission levels (e.g. a stream set to "manage" but a child stream within it set to "contribute"), only the highest level is considered.

  aside
    :markdown
      TODO: example

section
  h2 <a id="data-structure-followed-slice"></a>Followed slices
  .content
    :markdown
      See also: [core concepts](concepts.html#core-subscriptions).

    table.definitions
      tr
        th: :markdown
          `id`
        td: :markdown
          <span class="type">[identity](#data-structure-identity)</span>
          <span class="label unique">unique</span>
          <span class="label read-only">read-only</span><br>
          The server-assigned identifier for the subscription.
      tr
        th: :markdown
          `name`
        td: :markdown
          <span class="type">string</span>
          <span class="label unique">unique</span><br>
          A name identifying the subscription for the user.
      tr
        th: :markdown
          `url`
        td: :markdown
          <span class="type">string</span><br>
          The url pointing to the shared access's owning user's server. Not modifiable after creation.
      tr
        th: :markdown
          `accessToken`
        td: :markdown
          <span class="type">[identity](#data-structure-identity)</span><br>
          The token of the shared access itself. Not modifiable after creation.
  aside
    :markdown
      TODO: example

section
  h2 <a id="data-structure-additional-data"></a>Item additional data
  .content
    :markdown
      An object (key-value map) for client apps to store additional data about the containing item (stream, event, etc.), such as a color, a reference to an associated icon, or other app-specific metadata.

      ### Adding, updating and removing client data

      When the containing item is updated, additional data fields can be added, updated and removed as follows:

      - To add or update a field, just set its value; for example: `{"clientData": {"keyToAddOrUpdate": "value"}}`
      - To delete a field, set its value to `null`; for example: `{"clientData": {"keyToDelete": null}}`

      Fields you don't specify in the update are left untouched.

      ### Naming convention

      The convention is that each app names the keys it uses with an `"{app-id}:"` prefix. For example, an app with id "riki" would store its data in fields such as `"riki:key": "some value"`.

section
  h2 <a id="data-structure-error"></a>Error
  .content
    table.definitions
      tr
        th: :markdown
          `id`
        td: :markdown
          <span class="type">string</span><br>
          Identifier for the error; complements the response's HTTP error code.
      tr
        th: :markdown
          `message`
        td: :markdown
          <span class="type">string</span><br>
          A human-readable description of the error.
      tr
        th: :markdown
          `subErrors`
        td: :markdown
          <span class="type">array of errors</span>
          <span class="label optional">optional</span><br>
          Lists the detailed causes of the main error, if any.
  aside
    :markdown
      TODO: example

section
  h2 Simple types

  section
    h3 <a id="data-structure-identity"></a>Item identity
    .content
      :markdown
        A string value uniquely identifying an item of a given type (e.g. stream, event) for a given user. For some types of items ("structural" ones such as streams), it is allowed for the identity to be optionally set by API clients; otherwise the identity is generated by the server as an alphanumeric string.

  section
    h3 <a id="data-structure-timestamp"></a>Timestamp
    .content
      :markdown
        A positive floating-point number representing a number of seconds since any reference date and time, **independently from the time zone**. Because date and time synchronization between server time and client time is done by the client simply comparing the current server timestamp with its own, the reference date and time does not actually matter (but our servers do use standard Unix epoch time).
    aside
      :markdown
        Some examples of getting a valid timestamp in various environments:

        - JavaScript: `Date.now() / 1000`
        - PHP (5+): `microtime(true)`
        - TODO: more examples

  section
    h3 <a id="data-structure-language-code"></a>Two-letter ISO language code
    .content
      :markdown
        A two-letter string specifying a language following the ISO 639-1 standard (see [the related Wikipedia definition](http://en.wikipedia.org/wiki/ISO_639-1)).
