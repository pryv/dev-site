h1 Basics

section
  h2 API style
  .content
    :markdown
      Most of the API follows REST principles, meaning each item has its own unique resource URL and can be read or modified via HTTP verbs:

      - **GET** to read the item(s)
      - **POST** to create a new item, with a JSON message in the request body
      - **PUT** to modify the item, with a JSON message in the request body
      - **DELETE** to delete the item (note that logical deletion, or trashing, is supported for items like events and streams)

      The API also supports web sockets via Socket.IO, for both calling API methods and receiving live notifications of changes to activity data. See [the dedicated section](#socketio).

  aside
    :markdown
      #### Example request
      ```http
      GET /events HTTP/1.1
      Host: {username}.pryv.io
      Authorization: {access-token}
      ```

section
  h2 API endpoints
  .content
    :markdown
      `https://{username}.pryv.io` (where `{username}` is the name of the user whose data you want to access)

      Because Pryv potentially stores each user's data in a different location according to the user's choice, the API's base URL is unique for each user.

section
  h2 Data format
  .content
    :markdown
      The API exchanges data with the client in JSON.

  aside
    :markdown
      #### Example event
      ```json
      {
        "id": "5051941d04b8ffd00500000d",
        "time": 1347864935.964,
        "streamId": "5058370ade44feaa03000015",
        "type": "position/wgs84",
        "content": { "latitude": 40.714728, "longitude": -73.998672 },
      }
      ```

section
  h2 Alternative HTTP request method
  .content
    :markdown
      Because we can't fathom out the crazy rationale behind [HTTP access control (CORS) rules](https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS), we offer web apps an alternative way to place POST, PUT and DELETE requests in the API by using `application/x-www-form-urlencoded` POST requests with the following fields (all optional):

    table.definitions
      tr
        th: :markdown
          `_method`
        td: :markdown
          The HTTP override method to use (usually `PUT` or `DELETE`; `POST` is used if not set).
      tr
        th: :markdown
          `_auth`
        td: :markdown
          The `Authorization` header value (alternative to sending the header itself).
      tr
        th: :markdown
          `_json`
        td: :markdown
          Considered as the JSON request body if set (overriding all other body content, if any).

    :markdown
      This is intended for web apps only; if your app isn't running in browsers you should use regular requests.

section
  h2 Common response metadata
  .content
    :markdown
      The following metadata is included in every response:

    table.definitions
      tr
        th: :markdown
          `meta.apiVersion`
        td: :markdown
          The version of the API in the form `{major}.{minor}.{revision}`. Mirrored in HTTP header `API-Version`.
      tr
        th: :markdown
          `meta.serverTime`
        td: :markdown
          The current server time as a [timestamp](#data-structure-timestamp). Keeping reference of the server time is an absolute necessity to properly read and write event times.

section
  h2 Errors
  .content
    :markdown
      When an error occurs, the API returns a response with an `error` object (see [error](#data-structure-error)) detailing the cause. (Over HTTP, the response status is set to 4xx or 5xx.) In this documentation, errors are identified by their `id`.

  aside
    :markdown
      #### Example error response
      ```json
      {
        "error": {
          "id": "invalid-access-token",
          "message": "Cannot find access with token 'bad-token'."
        }
      }
      ```
