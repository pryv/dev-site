h1 API methods
.intro
  :markdown
    Not all methods are available over Socket.IO for the moment; for those that are, we indicate the method id next to the HTTP verb and path.

section
  h2 Preliminary information
  section
    h3 Authorization
    .content
      :markdown
        All requests for retrieving and manipulating activity data must carry a valid [access token](#data-structure-access) in the HTTP `Authorization` header or, alternatively, in the query string's `auth` parameter.  (You get the token by using one of the [access SDKs](app-access.html) or from sharing.)

    aside
      :markdown
        #### Example with `Authorization` header

        ```http
        GET /events HTTP/1.1
        Host: yacinthe.pryv.io
        Authorization: {access-token}
        ```

        #### Example with `auth` query string parameter

        ```http
        GET /events?auth={access-token} HTTP/1.1
        Host: yacinthe.pryv.io
        ```

  section
    h3 Common errors
    .content
      :markdown
        #### Bad request `400`

        - `invalid-request-structure`: The request's structure is not that expected. This can happen e.g. with invalid JSON syntax, or when using an unexpected multipart structure for uploading file attachments.
        - `invalid-parameters-format`: The request's parameters do not follow the expected format. The error's `data` contains an array of validation errors.
        - `unknown-event`: The referenced event(s) can't be found. If relevant, the unknown items' ids are listed as an array in the error's `data.unknownIds`.
        - `unknown-stream`: The referenced stream(s) can't be found. If relevant, the unknown items' ids are listed as an array in the error's `data.unknownIds`.
        - `unknown-tag`: The referenced typed tag(s) can't be found. If relevant, the unknown items' ids are listed as an array in the error's `data.unknownIds`.

        #### Unauthorized `401`

        - `invalid-access-token`: The data access token is missing or invalid.

        #### Forbidden `403`

        The given access token does not grant permission for this operation. See [accesses](#data-structure-access) for more details about accesses and permissions.

        #### Not found `404`

        - `unknown-event`: The event can't be found.
        - `unknown-stream`: The activity stream can't be found.
        - `unknown-tag`: The tag can't be found.
        - `unknown-attachment`: The attached file can't be found for the specified event.

        #### Moved `301`

        - `user-account-relocated`: The user has relocated her account to another Pryv server. Both the `Location` header and the error's `data` contain the equivalent URL pointing to the physical server now hosting the user's account. Note that this error can only occur between the moment the account is relocated and the moment your DNS is updated with the new server. So we're stretching the HTTP convention a little, in that the returned URL should not be used permanently (only until `{username}.pryv.io` points to the correct server again). You can decide whether you keep it for the duration of the session (if you have such a thing), for N hours, etc.

        #### Payment required `402`

        - `user-intervention-required`: We cannot serve the request at the moment, because the user's account has exceeded the limits of its plan. The user must log into Pryv to fix her account.

section
  h2 Events
  .intro
    :markdown
      Methods to retrieve and manipulate [events](#data-structure-event).

  section.method
    h3 Get events
    .content
      :markdown
        `GET /events`, Socket.IO: `events.get`

        Queries accessible events.

        #### Parameters

      table.definitions
        tr
          th: :markdown
            `fromTime`
          td: :markdown
            <span class="type">[timestamp](#data-structure-timestamp)</span>
            <span class="label optional">optional</span><br>
            The start time of the timeframe you want to retrieve events for. Default is 24 hours before `toTime` if the latter is set; otherwise it is not taken into account.
        tr
          th: :markdown
            `toTime`
          td: :markdown
            <span class="type">[timestamp](#data-structure-timestamp)</span>
            <span class="label optional">optional</span><br>
            The end time of the timeframe you want to retrieve events for. Default is the current time. Note: events are considered to be within a given timeframe based on their `time` only (`duration` is not considered).
        tr
          th: :markdown
            `streams`
          td: :markdown
            <span class="type">array of [identity](#data-structure-identity)</span>
            <span class="label optional">optional</span><br>
            If set, only events assigned to the specified streams and their sub-streams will be returned. By default, all accessible events are returned regardless of their stream.
        tr
          th: :markdown
            `tags`
          td: :markdown
            <span class="type">array of strings</span>
            <span class="label optional">optional</span><br>
            If set, only events assigned to all of the listed tags will be returned.
        tr
          th: :markdown
            `running`
          td: :markdown
            <span class="type">boolean</span>
            <span class="label optional">optional</span><br>
            If `true`, only running period events will be returned.
        tr
          th: :markdown
            `sortAscending`
          td: :markdown
            <span class="type">`true`|`false`</span>
            <span class="label optional">optional</span><br>
            If `true`, events will be sorted from oldest to newest. Default: false (sort descending).
        tr
          th: :markdown
            `skip`
          td: :markdown
            <span class="type">number</span>
            <span class="label optional">optional</span><br>
            The number of items to skip in the results.
        tr
          th: :markdown
            `limit`
          td: :markdown
            <span class="type">number</span>
            <span class="label optional">optional</span><br>
            The number of items to return in the results. A default value of 20 items is used if no other range limiting parameter is specified (`fromTime`, `toTime`).
        tr
          th: :markdown
            `state`
          td: :markdown
            <span class="type">`default`|`trashed`|`all`</span>
            <span class="label optional">optional</span><br>
            Indicates what items to return depending on their state. By default, only items that are not in the trash are returned; `trashed` returns only items in the trash, while `all` return all items regardless of their state.
        tr
          th: :markdown
            `modifiedSince`
          td: :markdown
            <span class="type">[timestamp](#data-structure-timestamp)</span>
            <span class="label optional">optional</span><br>
            If specified, only events modified since that time will be returned.

      :markdown
        #### Successful response: OK `200`

      table.definitions
        tr
          th: :markdown
            `events`
          td: :markdown
            <span class="type">array of [events](#data-structure-event)</span><br>
            The accessible events ordered by time (see `sortAscending` above).

    aside
      :markdown
        #### cURL example

        ```bash
        curl -i https://{username}.pryv.io/events?auth={access-token}
        ```

  section.method
    h3 Create event
    .content
      :markdown
        `POST /events`, Socket.IO: `events.create`

        Records a new event. It is recommended that events recorded this way are completed events, i.e. either period events with a known duration or mark events. To start a running period event, use [Start period](#TODO) instead.

        In addition to JSON, this request accepts standard multipart/form-data content to support the creation of event with attached files in a single request. When sending a multipart request, one content part must hold the JSON for the new event and all other content parts must be the attached files.

        #### Body parameters

        The new event's data: see [Event](#data-structure-event).

        #### Successful response: created `201`

      table.definitions
        tr
          th: :markdown
            `event`
          td: :markdown
            <span class="type">[event](#data-structure-event)</span><br>
            The created event.
        tr
          th: :markdown
            `stoppedId`
          td: :markdown
            <span class="type">[identity](#data-structure-identity)</span><br>
            Only in `singleActivity` streams. If set, indicates the id of the previously running period event that was stopped as a consequence of inserting the new event.

      :markdown
        #### Specific errors

        - Bad request `400`, `invalid-operation`: The stream is in the trash, and we prevent the recording of new events into trashed streams.
        - Bad request `400`, `periods-overlap`: Only in `singleActivity` streams: the new event overlaps existing period events. The overlapped events' ids are listed as an array in the error's `data.overlappedIds`.

    aside
      :markdown
        #### cURL example, post a mass record of 90Kg

        ```bash
        curl -i -H "Content-Type: application/json" -X POST -d '{"streamId":"{stream-id}", "type": "mass/kg", "content": 90}' https://{username}.pryv.io/events?auth={access-token}
        ```

        TODO: multipart/form-data example

  section.method
    h3 Start period
    .content
      :markdown
        `POST /events/start`, Socket.IO: `events.start`

        Starts a new period event. This is equivalent to starting an event with a null `duration`. In `singleActivity` streams, also stops the previously running period event if any. See [Create event](#TODO) for details.

    aside
      :markdown
        #### cURL example

        ```bash
        curl -i -H "Content-Type: application/json" -X POST -d '{"streamId":"{stream-id}"}' https://{username}.pryv.io/events/start?auth={access-token}
        ```

  section.method
    h3 Stop period
    .content
      :markdown
        `POST /events/stop`, Socket.IO: `events.stop`

        Stops a previously running period event. In `singleActivity` streams, which guarantee that only one event is running at any given time, that event is automatically determined; for regular streams, the event to stop must be specified.

        #### Parameters

      table.definitions
        tr
          th: :markdown
            `streamId`
          td: :markdown
            <span class="type">[identity](#data-structure-identity)</span><br>
            The id of the `singleActivity` stream in which to stop any running event. Either this or `id` must be specified.
        tr
          th: :markdown
            `id`
          td: :markdown
            <span class="type">[identity](#data-structure-identity)</span><br>
            The id of the event to stop. Either this or `streamId` must be specified.
        tr
          th: :markdown
            `time`
          td: :markdown
            <span class="type">[timestamp](#data-structure-timestamp)</span>
            <span class="label optional">optional</span><br>
            The stop time. Default: now.

      :markdown
        #### Successful response: OK `200`

      table.definitions
        tr
          th: :markdown
            `stoppedId`
          td: :markdown
            <span class="type">[identity](#data-structure-identity)</span><br>
            Only in `singleActivity` streams. The id of the previously running period event that was stopped, or null if no running event was found.

      :markdown
        #### Specific errors

        - Bad request `400`, `unknown-event`: The specified event cannot be found.
        - Bad request `400`, `invalid-operation`: The specified event is not a running period event.
        - Bad request `400`, `missing-parameter`: No event was specified and the specified stream is not a `singleActivity` stream (so that there can be more than one running event).

    aside
      :markdown
        #### cURL example

        ```bash
        #TODO
        ```

  section.method
    h3 Update event
    .content
      :markdown
        `PUT /events/{event-id}`, Socket.IO: `events.update`*

        Modifies the event's attributes.

        #### Body parameters

        New values for the event's fields: see [event](#data-structure-event). All fields are optional, and only modified values must be included. TODO: example

        #### Successful response: OK `200`

      table.definitions
        tr
          th: :markdown
            `event`
          td: :markdown
            <span class="type">[event](#data-structure-event)</span><br>
            The updated event.
        tr
          th: :markdown
            `stoppedId`
          td: :markdown
            <span class="type">[identity](#data-structure-identity)</span><br>
            Only in `singleActivity` streams. If set, indicates the id of the previously running period event that was stopped as a consequence of modifying the event.

      :markdown
        #### Specific errors

        - Bad request `400`, `invalid-operation`: Returned for period events, if attempting to set the event's duration to `undefined` (i.e. still running) while one or more other period events were recorded after it. The error's `data.conflictingPeriodId` provides the id of the closest conflicting event.
        - Bad request `400`, `periods-overlap`: Returned for period events, if attempting to change the event's duration to a value that causes an overlap with one or more subsequent period event(s). The overlapped events' ids are listed as an array in the error's `data.overlappedIds`.

    aside
      :markdown
        #### cURL example

        ```bash
        #TODO
        ```

  section.method
    h3 Add attached file(s) to event
    .content
      :markdown
        `POST /events/{event-id}`

        Adds one or more file attachments to the event. This request expects standard multipart/form-data content, with all content parts being the attached files.

        #### Successful response: OK `200`

    aside
      :markdown
        #### cURL example

        ```bash
        curl -i -F 'event={"streamId":"ePm4KDmxr","type":"picture/attached"}'  -F 'file=@-' https://{username}.pryv.io/events?auth={token} < {filename}
        ```

        ...or...

        ```bash
        curl -i -F 'event={"streamId":"ePm4KDmxr","type":"picture/attached"}'  -F "file=@{filename}" https://{username}.pryv.io/events?auth={token}
        ```

  section.method
    h3 Delete event
    .content
      :markdown
        `DELETE /events/{event-id}`, Socket.IO: `events.delete`

        Trashes or deletes the specified event, depending on its current state:

        - If the event is not already in the trash, it will be moved to the trash (i.e. flagged as `trashed`)
        - If the event is already in the trash, it will be irreversibly deleted (including all its attached files, if any).

        #### Successful response: No content `204`

    aside
      :markdown
        #### cURL example

        ```bash
        #TODO
        ```

  section.method
    h3 Get attached file
    .content
      :markdown
        `GET /events/{event-id}/{file name}`

        Gets the attached file.

        #### Successful response: OK `200`

    aside
      :markdown
        #### cURL example

        ```bash
        #TODO
        ```

  section.method
    h3 Delete attached file
    .content
      :markdown
        `DELETE /events/{event-id}/{filename}`, Socket.IO: `events.deleteAttachedFile`

        Irreversibly deletes the attached file.

        #### Successful response: No content `204`

    aside
      :markdown
        #### cURL example

        ```bash
        #TODO
        ```

  section.method
    h3 Batch-create events
    .content
      :markdown
        `POST /events/batch`, Socket.IO: `events.createBatch`

        **This will be replaced with a generic batch method accepting any type of method calls.**

        Batch upload events that were recorded by the client while offline. The submitted events are added in-order, with results returned individually for each (see response below).

        #### Parameters

        An array of client-recorded [events](#data-structure-event). In addition to the regular properties, each event must have a unique `tempRefId` defined (as it's temporary it must only be unique within the request). Also, make sure that the events' `time` is set in server time (as for single event requests).

        #### Successful response: OK `200`

        An object with one property per event submitted holding the result for that event. Each property's name is the submitted event's client id, and its value contains:

        - If the event was successful created, an object with the `id` of the event, and possibly the `stoppedId` of the running period event that was stopped as a result. (For details, see POST `/events`.)
        - If there was an error creating the event: an object with an `error` property holding the encountered [error](#data-structure-error).

    aside
      :markdown
        #### cURL example

        save a combination of blood pressures and heart rate.

        ```bash
        curl -i -H "Content-Type: application/json" -X POST -d '[
        {"tempRefId": "aa", "time": 1385046854.282,
         "streamId": "heart", "type": "frequency/bpm", "content": 90},
        {"tempRefId": "bb", "time": 1385046854.282,
         "streamId": "systolic", "type": "pressure/mmhg", "content": 120},
        {"tempRefId": "cc", "time": 1385046854.282,
         "streamId": "diastolic", "type": "pressure/mmhg", "content": 80
        } ]' "https://$USERNAME.pryv.io/events/batch?auth=$TOKEN"
        ```

        #### Example response

        ```json
        {
         "aa":{"id":"PVRD0xlGXq"},
         "bb":{"id":"TPMxA0RZKXq"},
         "cc":{"id":"TTixw0vlKKO"}
        }
        ```

section
  h2 Streams
  .intro
    :markdown
      Methods to retrieve and manipulate [streams](#data-structure-stream).

  section.method
    h3 Get streams
    .content
      :markdown
        `GET /streams`, Socket.IO: `streams.get`

        Gets the accessible streams, either from the root level or only descending from a specified parent stream.

        #### Parameters

      table.definitions
        tr
          th: :markdown
            `parentId`
          td: :markdown
            <span class="type">[identity](#data-structure-identity)</span>
            <span class="label optional">optional</span><br>
            The id of the parent stream to use as root for the request. Default: `null` (returns all accessible streams from the root level).
        tr
          th: :markdown
            `state`
          td: :markdown
            <span class="type">`default`|`all`</span>
            <span class="label optional">optional</span><br>
            Indicates what items to return depending on their state. By default, only items that are not in the trash are returned; `all` return all items regardless of their state.

      :markdown
        #### Successful response: OK `200`

      table.definitions
        tr
          th: :markdown
            `streams`
          td: :markdown
            <span class="type">array of [streams](#data-structure-stream)</span><br>
            The tree of the accessible streams, sorted by name.

      :markdown
        #### Specific errors

        - Bad request `400`, `unknown-stream`: The specified parent stream can't be found.

    aside
      :markdown
        #### cURL example

        Create a sub-stream "diastolic" of "heart"

        ```bash
        curl -i -H "Content-Type: application/json" -X POST -d '
        {"id":"diastolic",
         "name": "Diastolic pressure",
         "parentId": "heart"
        }' "https://$USERNAME.pryv.io/streams?auth=$TOKEN"
        ```

  section.method
    h3 Create stream
    .content
      :markdown
        `POST /streams`, Socket.IO: `streams.create`

        Creates a new stream at the root level or as a child stream to the specified stream.

        #### Body parameters

        The new stream's data: see [activity stream](#data-structure-stream).

        #### Successful response: created `201`

      table.definitions
        tr
          th: :markdown
            `stream`
          td: :markdown
            <span class="type">[stream](#data-structure-stream)</span><br>
            The created stream.

      :markdown
        #### Specific errors

        - Bad request `400`, `item-id-already-exists`: A stream already exists with the same id.
        - Bad request `400`, `item-name-already-exists`: A sibling stream already exists with the same name.
        - Bad request `400`, `invalid-item-id`: Occurs if trying to set the id to an invalid value (e.g. a reserved word like `"null"`).

    aside
      :markdown
        #### cURL example

        ```bash
        #TODO
        ```

  section.method
    h3 Update stream
    .content
      :markdown
        `PUT /streams/{stream-id}`, Socket.IO: `streams.update`*

        Modifies the activity stream's attributes.

        #### Parameters

        New values for the stream's fields: see [activity stream](#data-structure-stream). All fields are optional, and only modified values must be included.

        #### Successful response: OK `200`

      table.definitions
        tr
          th: :markdown
            `stream`
          td: :markdown
            <span class="type">[stream](#data-structure-stream)</span><br>
            The updated stream (without child streams).

      :markdown
        #### Specific errors

        - Bad request `400`, `unknown-stream`: The specified parent stream's id is unknown.
        - Bad request `400`, `item-name-already-exists`: A sibling stream already exists with the same name.

    aside
      :markdown
        #### cURL example

        ```bash
        #TODO
        ```

  section.method
    h3 Delete stream
    .content
      :markdown
        `DELETE /streams/{stream-id}`, Socket.IO: `streams.delete`

        Trashes or deletes the specified stream, depending on its current state:

        - If the stream is not already in the trash, it will be moved to the trash (i.e. flagged as `trashed`)
        - If the stream is already in the trash, it will be irreversibly deleted with its possible descendants. If events exist that refer to the deleted item(s), you must indicate how to handle them with the parameter `mergeEventsWithParent`..

        #### Parameters

      table.definitions
        tr
          th: :markdown
            `mergeEventsWithParent`
          td: :markdown
            <span class="type">`true`|`false`</span><br>
            Required if actually deleting the item and if it (or any of its descendants) has linked events, ignored otherwise. If `true`, the linked events will be assigned to the parent of the deleted item; if `false`, the linked events will be deleted.

      :markdown
        #### Successful response: No content `204`

        #### Specific errors

        - Bad request `400`, `missing-parameter`: There are events referring to the deleted items and the `mergeEventsWithParent` parameter is missing.

    aside
      :markdown
        #### cURL example

        ```bash
        #TODO
        ```

section
  h2 <a id="activity-accesses"></a>Accesses
  .intro
    :markdown
      While full access management is reserved for trusted apps, any app can retrieve and manage shared accesses depending on its own permissions. All methods here only deal with shared accesses whose permissions are a subset of that linked to the token used for the requests. (You'll get a `403 Forbidden` error if trying to touch other types of accesses, or shared accesses with greater permissions.)

  section.method
    h3 Get current access info
    .content
      :markdown
        `GET /access-info`

        Retrieves information about the current access.

        #### Successful response: OK `200`

      table.definitions
        tr
          th: :markdown
            `name`
          td: :markdown
            <span class="type">string</span><br>
            The current access' name.
        tr
          th: :markdown
            `type`
          td: :markdown
            <span class="type">string</span><br>
            The current access' type.
        tr
          th: :markdown
            `permissions`
          td: :markdown
            <span class="type">[access](#data-structure-access).permissions</span><br>
            The current access' permissions.

    aside
      :markdown
        #### cURL example

        ```bash
        curl -i -H "Authorization: {access-token}" https://{username}.pryv.io/access-info
        ```

  section.method
    h3 Get accesses
    .content
      :markdown
        `GET /accesses`

        Gets all manageable shared accesses.

        #### Successful response: OK `200`

      table.definitions
        tr
          th: :markdown
            `accesses`
          td: :markdown
            <span class="type">array of [accesses](#data-structure-access)</span><br>
            All manageable shared accesses in the user's account, ordered by name.

    aside
      :markdown
        #### cURL example

        ```bash
        curl -i -H "Authorization: {access-token}" https://{username}.pryv.io/accesses
        ```

  section.method
    h3 Create access
    .content
      :markdown
        `POST /accesses`

        Creates a new shared access. You can only create accesses whose permissions are a subset of those linked to your own access token.

        #### Parameters

        The new access's data: see [access](#data-structure-access).

        #### Successful response: created `201`

      table.definitions
        tr
          th: :markdown
            `access`
          td: :markdown
            <span class="type">[access](#data-structure-access)</span><br>
            The created access.

      :markdown
        #### Specific errors

        - Bad request `400`, `invalid-item-id`: Occurs if trying to set the token to an invalid value (e.g. a reserved word like `"null"`).

    aside
      :markdown
        #### cURL example

        ```bash
        #TODO
        ```

  section.method
    h3 Update access
    .content
      :markdown
        `PUT /accesses/{id}`

        Modifies the specified shared access. You can only modify accesses whose permissions are a subset of those linked to your own access token.

        #### Parameters

        New values for the access's fields: see [access](#data-structure-access). All fields are optional, and only modified values must be included. TODO: example

        #### Successful response: OK `200`

      table.definitions
        tr
          th: :markdown
            `access`
          td: :markdown
            <span class="type">[access](#data-structure-access)</span><br>
            The updated access.

    aside
      :markdown
        #### cURL example

        ```bash
        #TODO
        ```

  section.method
    h3 Delete access
    .content
      :markdown
        `DELETE /accesses/{id}`

        Deletes the specified shared access. You can only delete accesses whose permissions are a subset of those linked to your own access token.

        #### Successful response: No content `204`

    aside
      :markdown
        #### cURL example

        ```bash
        #TODO
        ```

section
  h2 <a id="activity-profile-app"></a>App profile
  .intro
    :markdown
      The app profile is a simple key-value store available for your app to keep user settings. It is exposed as a plain object with free structure. The adding/updating/deleting of settings is designed in the expectation that each setting is a key at the profile object's root, but you can structure your profile differently if you wish.

      The app profile can only be used if authentified with an app access token.

  section.method
    h3 Get app settings
    .content
      :markdown
        `GET /profile/app`

        Gets your app profile settings.

        #### Successful response: OK `200`

      table.definitions
        tr
          th: :markdown
            `profile`
          td: :markdown
            <span class="type">object</span><br>
            Your app's current profile settings. (Empty if your app never defined any setting.)

    aside
      :markdown
        #### cURL example

        ```bash
        #TODO
        ```

  section.method
    h3 Update profile settings
    .content
      :markdown
        `PUT /profile/app`

        Adds, updates or delete settings.

        - To add or update a setting, just set its value
        - To delete a field, set its value to `null`

        Settings you don't specify in the update are left untouched.

        #### Parameters

        An object with the desired changes to the settings (see above).

        #### Successful response: OK `200`

      table.definitions
        tr
          th: :markdown
            `profile`
          td: :markdown
            <span class="type">object</span><br>
            Your app's updated profile settings.

    aside
      :markdown
        #### Simple example

        ```json
        {
          "keyToAddOrUpdate": "value",
          "keyToDelete": null
        }
        ```

        #### cURL example

        ```bash
        #TODO
        ```

section
  h2 <a id="activity-profile-public"></a>Public profile
  .intro
    :markdown
      The public profile is a simple read-only object exposing publicly shared user information (e.g. avatar image) for use in your app.

  section.method
    h3 Get public info
    .content
      :markdown
        `GET /profile/public`

        Gets the user's public profile info.

        #### Successful response: OK `200`

      table.definitions
        tr
          th: :markdown
            `profile`
          td: :markdown
            <span class="type">object</span><br>
            The user's current public profile information.

    aside
      :markdown
        #### cURL example

        ```bash
        #TODO
        ```
