mixin h1(string)
  if string
    !{markdown('#' + string)}

mixin h2(string)
  if string
    !{markdown('##' + string)}

mixin h3(string)
  if string
    !{markdown('###' + string)}

mixin h4(string)
  if string
    !{markdown('####' + string)}

mixin h5(string)
  if string
    !{markdown('#####' + string)}

mixin intro(string)
  if string
    .intro
      !{markdown(string)}

mixin text(string)
  if string
    !{markdown(string)}

mixin methodId(id)
  if id
    span.method-id
      span.label id
      span.label-value: code !{id}

mixin http(http, httpOnly)
  if http
    span.http
      span.label= httpOnly ? 'HTTP-only' : 'HTTP'
      span.label-value
        if http.code
          code !{http.code}
        else if http.text
          span !{http.text}
        else
          code !{http}


mixin typeText(string)
  if string
    - var output = markdown(string)
    -// YES, HACK
    span.type !{output.indexOf('<p>') === 0 ? output.substr(3, output.length - 8) : output}

mixin labelValue(label, cssClass, value)
  if value
    span(class='label ' + cssClass)
      !{label + (typeof(value) === 'string' ? ' ' + value : '')}

mixin properties(properties)
  if properties
    table.definitions
      each prop in properties
        tr
          th
            code !{prop.key}
          td
            .header
              -// TODO make type specification flexible
              +typeText(prop.type)
              +labelValue('unique', 'unique', prop.unique)
              +labelValue('optional', 'optional', prop.optional)
              +labelValue('read-only', 'read-only', prop.readOnly)
              +http(prop.http)
            .description !{markdown(prop.description)}
            +properties(prop.properties)

mixin result(result)
  if result
    +h4(result.title || 'Result')
    +http(result.http)
    +text(result.description)
    +properties(result.properties)


mixin exampleContent(content)
  if content
    if typeof(content) === 'string'
      +text(content)
    else
      pre: code !{printJSON(content)}

mixin section(section, inDocParentId)
  - var isMethod = section.type === 'method'
  section(id='#{getInDocId(inDocParentId, section.id)}', class='#{section.type || ""}')
    +h3(section.title)
    .content
      if isMethod
        .meta
          if ! section.httpOnly
            +methodId(section.id)
          +http(section.http, section.httpOnly)
      +intro(section.description)
      +properties(section.properties)
      if section.params
        +h4('Parameters')
        +text(section.params.description)
        +properties(section.params.properties)
      if section.result
        if section.result instanceof Array
          each result in section.result
            +result(result)
        else
          +result(section.result)
      if section.errors
        +h4('Specific errors')
        +properties(section.errors)
    if section.examples
      aside
        each ex in section.examples
          +text(ex.title)
          +exampleContent(ex.content)
          +exampleContent(ex.params)
          if ex.result
            .step-marker â¬‡
            +exampleContent(ex.result)

mixin type(type, inDocParentId)
  section(id='#{getInDocId(inDocParentId, type.id)}')
    +h2(type.title)
    .content
      +intro(type.description)
      +properties(type.properties)
    if type.examples
      aside
        each ex in type.examples
          +text(ex.title)
          +exampleContent(ex.content)

- function getInDocId() { return [].slice.apply(arguments).join('-'); }
- function printJSON(content) { return JSON.stringify(content, null, 2); }

each level1Section in serverDoc
  section(id='#{getInDocId(level1Section.id)}')
    +h1(level1Section.title)
    +intro(level1Section.description)

    if level1Section.sections
      each level2Section in level1Section.sections
        section(id='#{getInDocId(level1Section.id, level2Section.id)}')
          +h2(level2Section.title)
          +intro(level2Section.description)

          if level2Section.sections
            each section in level2Section.sections
              - var parentInDocId = getInDocId(level1Section.id, level2Section.id)
              +section(section, parentInDocId)

    if level1Section.types
      each type in level1Section.types
        +type(type, level1Section.id)
