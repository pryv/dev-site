extends layout

mixin h1(string)
  if string
    | !{markdown('# ' + string)}

mixin h2(string)
  if string
    | !{markdown('## ' + string)}

mixin h3(string)
  if string
    | !{markdown('### ' + string)}

mixin h4(string)
  if string
    | !{markdown('#### ' + string)}

mixin h5(string)
  if string
    | !{markdown('##### ' + string)}

mixin intro(string)
  if string
    .intro
      | !{markdown(string)}

mixin text(string)
  if string
    | !{markdown(string)}

mixin requirementId(id)
  if id
    span.method-id
      span.label id
      span.label-value: code !{id}

mixin reference(ref)
  if ref.url
   a(href=ref.url) !{ref.description}


mixin typeText(string)
  if string
    - var output = markdown(string)
    -// YES, HACK
    span.type !{output.indexOf('<p>') === 0 ? output.substr(3, output.length - 8) : output}

mixin labelValue(label, cssClass, value)
  if value
    span(class='label label-default ' + cssClass)
      | !{label + (typeof(value) === 'string' ? ' ' + value : '')}


mixin properties(properties)
  if properties
    table.definitions
      each prop in properties
        tr
          th
            if prop.key instanceof Array
              - var i = 0
              each key in prop.key
                code !{key}
                if i < prop.key.length - 1
                  | |
                - i++
            else
              code !{prop.key}
          td
            .header
              -// TODO make type specification flexible
              +typeText(prop.type)
            .description !{markdown(prop.description)}
            +properties(prop.properties)

mixin requirements(requirements, reqid, parentDocId)
  if requirements
    each requirement in requirements
      if ! requirement.ignore
        - var myId = reqid + requirement.reqid
        - var docId = functionalSpecifications.helpers.getDocId(myId)
        requirement(id='#{docId}')
          +requirementId(myId)
          table.definitions
            tr
              th
                code !{"Title"}
              td
                .header
                  -// TODO make type specification flexible
                  +typeText(requirement.title)
            tr
              th
                code !{"Desc"}
              td
                .description !{markdown(requirement.description || '')}
            if requirement.refs
              tr
                th
                  code !{"Refs"}
                td
                  ol
                    each ref in requirement.refs
                      li 
                        +reference(ref)


mixin section(section, parentDocId, level, nreqid, nsectionHeader, sectionNum)
  if ! section.ignore
    - var reqid = 'REQ_'
    if nreqid 
      - reqid = '' + nreqid
    if section.reqid 
      - reqid = reqid + section.reqid + '_' 
    - var sectionHeader = ''
    if nsectionHeader
      - sectionHeader = nsectionHeader
    - var sectionTitle = sectionHeader + ' ' + section.title
    - var docId = functionalSpecifications.helpers.getDocId(parentDocId, section.id)
    - var sectionClass = (section.type || '')
    section(id='#{docId}', class='#{sectionClass}')
      if level === 1
        +h1(sectionTitle)
      else if level === 2
        +h2(sectionTitle)
      else if level === 3
        +h3(sectionTitle)
      else
        +h4(sectionTitle)
      .content
        .meta
        +intro(section.description)
        +properties(section.properties)
        +requirements(section.requirements, reqid, parentDocId)
      if section.sections
        - var subSectionNum = 0
        each subSection in section.sections
          - subSectionNum++
          +section(subSection, parentDocId, level + 1, reqid, sectionHeader + subSectionNum + '.')

block content
  - var source = sourceOverride ? functionalSpecifications[sourceOverride] : functionalSpecifications
  - var sectionNum = 0
  - var sectionHeader = ''
  each level1Section in source.sections
    - sectionNum++
    - sectionHeader = sectionNum + '.'
    +section(level1Section, level1Section.id, 1, '', sectionHeader)



