extends layout

mixin h1(string)
  if string
    | !{markdown('# ' + string)}

mixin h2(string)
  if string
    | !{markdown('## ' + string)}

mixin h3(string)
  if string
    | !{markdown('### ' + string)}

mixin h4(string)
  if string
    | !{markdown('#### ' + string)}

mixin h5(string)
  if string
    | !{markdown('##### ' + string)}

mixin intro(string)
  if string
    .intro
      | !{markdown(string)}

mixin text(string)
  if string
    | !{markdown(string)}

mixin methodId(id)
  if id
    span.method-id
      span.label id
      span.label-value: code !{id}

mixin http(http, httpOnly)
  if http
    span.http
      span.label= httpOnly ? 'HTTP-only' : 'HTTP'
      span.label-value
        if http.code
          code !{http.code}
        else if http.text
          - var output = markdown(http.text)
          -// YES, HACK
          span !{output.indexOf('<p>') === 0 ? output.substr(3, output.length - 8) : output}
        else
          code !{http}


mixin typeText(string)
  if string
    - var output = markdown(string)
    -// YES, HACK
    span.type !{output.indexOf('<p>') === 0 ? output.substr(3, output.length - 8) : output}

mixin labelValue(label, cssClass, value)
  if value
    span(class='label label-default ' + cssClass)
      | !{label + (typeof(value) === 'string' ? ' ' + value : '')}

mixin properties(properties)
  if properties
    table.definitions
      each prop in properties
        tr
          th
            if prop.key instanceof Array
              - var i = 0
              each key in prop.key
                code !{key}
                if i < prop.key.length - 1
                  | |
                - i++
            else
              code !{prop.key}
          td
            .header
              -// TODO make type specification flexible
              +typeText(prop.type)
              +labelValue('unique', 'unique', prop.unique)
              +labelValue('optional', 'optional', prop.optional)
              +labelValue('read-only', 'read-only', prop.readOnly)
              +http(prop.http)
            .description !{markdown(prop.description)}
            +properties(prop.properties)

mixin result(result)
  if result
    +h4(result.title || 'Result')
    +http(result.http)
    +text(result.description)
    +properties(result.properties)


mixin exampleContent(content)
  if content
    if typeof(content) === 'string'
      +text(content)
    else
      pre: code !{helpers.printJSON(content)}

-// settings: {id, http, [result.http], server} context to generate example forms (e.g. HTTP, cURL...)
mixin examples(examples, settings)
  if examples
    aside
      - for (var i = 0; i < examples.length; i++)
        - var ex = examples[i]
        .example
          +text(ex.title)
          if ex.content || typeof(ex.params) === 'string'
            +exampleContent(ex.content)
            +exampleContent(ex.params)
            if ex.result
              .step-marker ⬇
              +exampleContent(ex.result)
          else if ex.params
            .tab-content
              .tab-pane.json.active
                pre: code !{helpers.getRawCall(ex.params, settings.http)}
                if ex.result
                  .step-marker ⬇
                  pre: code !{helpers.printJSON(ex.result)}
              if settings.http
                .tab-pane.http
                  pre: code.
                    !{apiReference.helpers.getCurlCall(ex.params, settings.http, settings.server, false)}
                  if ex.result
                    .step-marker ⬇
                    pre: code.
                      HTTP/1.1 !{ex.resultHTTP || settings.result.http || settings.result[0].http}
                      Content-Type: application/json; charset=utf-8
                      API-Version: !{apiReference.version}

                      !{helpers.printJSON(ex.result)}
             
              if settings.id
                .tab-pane.sockets
                  pre: code.
                    socket.emit('!{settings.id}', !{helpers.getWebsocketCall(ex.params)}, callback);
                  if ex.result
                    .step-marker ⬇
                    pre: code !{helpers.printJSON(ex.result)}


              if settings.httpAuth
              .tab-pane.httpAuth
                pre: code.
                  !{apiReference.helpers.getCurlCall(ex.params, settings.http, settings.server, true)}
                if ex.result
                  .step-marker ⬇
                  pre: code.
                    HTTP/1.1 !{ex.resultHTTP || settings.result.http || settings.result[0].http}
                    Content-Type: application/json; charset=utf-8
                    API-Version: !{apiReference.version}

                    !{helpers.printJSON(ex.result)}

mixin section(section, parentDocId, level)
  - var isMethod = section.type === 'method'
  - var docId = apiReference.helpers.getDocId(parentDocId, section.id)
  - var sectionClass = (section.type || '')
  // it's either:
  // !trusted & !preview
  // !preview & -full
  // -preview
  if (!section.trustedOnly && !section.previewOnly) || (!section.previewOnly && showTrustedOnlyContent) || showPreviewOnlyContent
    section(id='#{docId}', class='#{sectionClass}')
      if level === 2
        +h2(section.title)
      else if level === 3
        +h3(section.title)
      else
        +h4(section.title)
      .content
        .meta
          if isMethod
            if ! section.httpOnly
              +methodId(section.id)
            +http(section.http, section.httpOnly)
          if section.trustedOnly
            if typeof(section.trustedOnly) === 'string'
              span.label.trusted-only !{section.trustedOnly}
            else 
              span.label.trusted-only Trusted apps only
          if section.previewOnly
            span.label.trusted-only Preview 
        +intro(section.description)
        +properties(section.properties)
        if section.params
          +h4(section.params.title || 'Parameters')
          +text(section.params.description)
          +properties(section.params.properties)
        if section.result
          if section.result instanceof Array
            each result in section.result
              +result(result)
          else
            +result(section.result)
        if section.errors
          +h4('Specific errors')
          +properties(section.errors)
      +examples(section.examples, section)
      if section.sections
        each subSection in section.sections
          +section(subSection, docId, level + 1)
  
block content
  - var source = sourceOverride ? apiReference[sourceOverride] : apiReference
  each level1Section in source.sections
    section(id='#{apiReference.helpers.getDocId(level1Section.id)}')
      +h1(level1Section.title)
      +intro(level1Section.description)

      if level1Section.sections
        each level2Section in level1Section.sections
          +section(level2Section, level1Section.id, 2)


//- Support for switching examples format

block custom-navbar-items
  form.navbar-form.navbar-right
    .form-group
      label(for='examples-api') API:&nbsp;
      select#examples-api.form-control
        option(value='pryv.me', selected='selected') Pryv.me: ${username}.pryv.me
        option(value='DNSLess') DNSLess: ${hostname}/${username}
        option(value='Own') Own domain: ${username}.${domain}
    .form-group
      label(for='examples-format') &nbsp;Examples:&nbsp;
      select#examples-format.form-control
        option(value='json', selected='selected') Raw JSON
        option(value='http') cURL
        option(value='sockets') Socket.IO
        option(value='httpAuth') cURL auth

block custom-scripts
  // Code examples format switch
  script.
    $(document).ready(function () {
      setExamplesFormat($('#examples-format').get(0).value);
      for (c of ['-user', '-host', '', '-curl']) {
         $("span").siblings('.api' + c).addClass('hljs-string'); // add source code class to all items
      }
      setExamplesAPI('pryv.me');
    });
    $('#examples-format').on('change', function () {
      setExamplesFormat(this.value);
    });
    $('#examples-api').on('change', function () {
      setExamplesAPI(this.value);
    });
    function setExamplesAPI(value) {
      switch (value) {
        case 'DNSLess':
          $("span").siblings( ".api-user").text('{username}');
          $("span").siblings( ".api-host").text('{hostname}');
          $("span").siblings( ".api-reg").text('{hostname}/reg');
          $("span").siblings( ".api" ).text('{hostname}/{username}');
          $("span").siblings( ".api-curl" ).text('${hostname}/${username}');
        break;
        case 'Own':
          $("span").siblings( ".api-user").text('');
          $("span").siblings( ".api-host").text('{username}.{domain}');
          $("span").siblings( ".api-reg" ).text('reg.{domain}');
          $("span").siblings( ".api" ).text('{username}.{domain}');
          $("span").siblings( ".api-curl" ).text('${username}.${domain}');
        break;
        default: // pryv.me
          $("span").siblings( ".api-user").text('');
          $("span").siblings( ".api-host").text('{username}.pryv.me');
          $("span").siblings( ".api-reg" ).text('reg.pryv.me');
          $("span").siblings( ".api" ).text('{username}.pryv.me');
          $("span").siblings( ".api-curl" ).text('${username}.${domain}');
        break;
      }
      console.log('Switched to ' + value);
    }
    function setExamplesFormat(format) {
      var removeSelectors = [];
      ['json', 'http', 'sockets', 'httpAuth'].forEach(function (f) {
        if (format !== f) {
          removeSelectors.push('.example .tab-pane.' + f + '.active');
        }
      });
      $(removeSelectors.join(',')).removeClass("active");
      $('.example .tab-pane.' + format).addClass("active");
    }
