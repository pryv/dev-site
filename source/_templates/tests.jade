extends layout

mixin h1(string)
  if string
    | !{markdown('# ' + string)}

mixin h2(string)
  if string
    | !{markdown('## ' + string)}

mixin h3(string)
  if string
    | !{markdown('### ' + string)}

mixin h4(string)
  if string
    | !{markdown('#### ' + string)}

mixin h5(string)
  if string
    | !{markdown('##### ' + string)}

mixin intro(string)
  if string
    .intro
      | !{markdown(string)}

mixin text(string)
  if string
    | !{markdown(string)}

mixin testId(id)
  if id
    span.method-id
      span.label id
      span.label-value: code !{id}

mixin reference(ref)
  if ref.url
   a(href=ref.url) !{ref.description}


mixin typeText(string)
  if string
    - var output = markdown(string)
    -// YES, HACK
    span.type !{output.indexOf('<p>') === 0 ? output.substr(3, output.length - 8) : output}

mixin labelValue(label, cssClass, value)
  if value
    span(class='label label-default ' + cssClass)
      | !{label + (typeof(value) === 'string' ? ' ' + value : '')}


mixin properties(properties)
  if properties
    table.definitions
      each prop in properties
        tr
          th
            if prop.key instanceof Array
              - var i = 0
              each key in prop.key
                code !{key}
                if i < prop.key.length - 1
                  | |
                - i++
            else
              code !{prop.key}
          td
            .header
              -// TODO make type specification flexible
              +typeText(prop.type)
            .description !{markdown(prop.description)}
            +properties(prop.properties)

mixin stats(stats)
  +h4('Stats')
  table.definitions
      each key in Object.keys(stats)
        tr
          th
            code !{key}
          td
             | !{stats[key]}




mixin tests(tests)
  if tests
    each test in tests
      tr
        td
          code !{test.id}
        td
          if typeof(test.duration) === "undefined"
            | !{"❓"}
          else if test.err.title
            | !{"‎❌"}
          else 
            | !{"✅"}
        td
          +typeText(test.title)


mixin testsets(testsets)
  if testsets
    +h4('Tests')
    table 
      thead
        tr
          th 
            | !{"Id"}
          th  
            | !{"Status"}
          th
            | !{"Test"}
      tbody
        each setTitle in Object.keys(testsets)
          tr
            td(colspan=3)
              b
               | !{testResults.helpers.ucFirst(setTitle)}
          +tests(testsets[setTitle].tests)
          


mixin component(component, parentDocId, level)
  - var sectionTitle = component.componentName
  - var docId = testResults.helpers.getDocId(parentDocId, component.componentName)
  - var sectionClass = ''
  section(id='#{docId}', class='#{sectionClass}')
    if level === 1
      +h1(sectionTitle)
    else if level === 2
      +h2(sectionTitle)
    else if level === 3
      +h3(sectionTitle)
    else
      +h4(sectionTitle)
     .content
      .meta
      +stats(component.stats) 

      +testsets(component.sets, parentDocId)


mixin version(version, parentDocId, level)
  +intro('Date: ' + version.date)
  if version.components
    each component in version.components
      +component(component, parentDocId, level)
       
      


mixin section(section, parentDocId, level)
  - var sectionTitle = section.title
  - var docId = testResults.helpers.getDocId(parentDocId, section.id)
  - var sectionClass = (section.type || '')
  section(id='#{docId}', class='#{sectionClass}')
    if level === 1
      +h1(sectionTitle)
    else if level === 2
      +h2(sectionTitle)
    else if level === 3
      +h3(sectionTitle)
    else
      +h4(sectionTitle)
    .content
      .meta
      +intro(section.description)
      +properties(section.properties)
    if section.sections
      each subSection in section.sections
        +section(subSection, parentDocId, level + 1)
    if section.version
        +version(section.version, parentDocId, level + 1)

block content
  - var source = sourceOverride ? testResults[sourceOverride] : testResults
  - var sectionHeader = ''
  each level1Section in source.sections
    +section(level1Section, level1Section.id, 1)



