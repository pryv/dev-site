---
id: event-types
titleShort: Event types
titleFull: Event types reference
template: default.jade
withTOC: true
sourcePath: hierarchical.json
flatPath: flat.json
include:
  sourceData: event-types/_source/event-types.json
---

- var classes = sourceData.classes

-// extract numerical types (classes)

- var classNames = Object.keys(classes)
- var complexClasses = {}
- var numericalClasses = {}
each className in classNames
  - var classDef = classes[className]
  - var numberOnly = true

  each formatName in Object.keys(classDef.formats)
    - var formatDef = classDef.formats[formatName]
    if formatDef.type !== 'number'
      - numberOnly = false
      - break
  if numberOnly
    - numericalClasses[className] = classDef
  else
    - complexClasses[className] = classDef


section#about
  h1 About types
  :markdown
    You are free to use any type in your app, but for the sake of interoperability we heavily recommend that you stick to the standard types listed here, and [help us](https://github.com/pryv/data-types) complete or adjust the directory if you don't find what you need.

    ## Basics

    An event's type is defined by its `type` property that indicates how to handle its `content` (if any).
    The type itself is specified as `{class}/{format}`, lowercase (e.g. `note/html`). Rationale:

    - The class usually specifies the "nature" or "kind" of data represented by the event.
      Events of the same class are assumed to be comparable and convertible,
      and will likely be displayed similarly.
    - The format usually specifies how the data is structured. For example, a
      basic note may just be a single string value, while an rich-text note could be a more complex
      object structure.

    ## Format specification

    For each of the types described below, the event content's structure is specified with
    [JSON-schema](http://tools.ietf.org/html/draft-zyp-json-schema-04#page-8).
    Notes:

    - A "null" content type means that the event has no `content` property (because the core event
      structure is sufficient).
    - Any content type other than "null" implies that the event must have a `content` property of the
      specified JSON-schema type.
    - If the content is an object, its (sub-)properties are assumed to be optional unless
      otherwise specified by JSON-schema's "required" field.

    ## JSON file

    This directory is available as a JSON file for automated processing:

    - [Hierarchical structure](!{sourcePath}): `classes['{class}'].formats['{format}']`
    - [Flat structure](!{flatPath}): `types['{class}/{format}']`

    ## Submitting types & issues

    This directory will keep evolving to match the needs of Pryv apps: [issues and pull requests are welcome](https://github.com/pryv/data-types).

    &nbsp;

    &nbsp;


section#directory
  h1 Directory

  p.version Version: <strong>#{sourceData.version}</strong>

  h2 Complex types

  mixin attribute(header, value)
    if value
      | ,
      span.attribute
        strong !{header}:&nbsp;
        | !{value}

  mixin definition(name, schema)
    - var type = schema.type
    - var description = schema.description
    - var properties = schema.properties
    - var example = schema.example
    tr
      th: code !{name}
      td
        if type && type !== 'null'
          | !{type}
        else
          span.label.label-default no content
          | &nbsp;
        each key in Object.keys(schema)
          - var value = schema[key]
          if key !== 'type' && key !== 'description' && key !== 'properties' && key !== 'patternProperties' && key !== 'example'
            if key === 'pattern'
              +attribute(key, '<code>' + value + '</code>')
            else if key === 'required' && value
              - var asCode = value.map(function(k)Â { return '<code>' + k + '</code>'; });
              +attribute(key, asCode.join(', '))
            else if key === 'attachmentRequired' && value
              span.label.label-default attachment required
            else if key === 'additionalProperties'
              +attribute('additional properties', value ? 'allowed' : 'forbidden')
            else
              +attribute(key, value)
        if description
          .description !{markdown(description)}
        if properties
          table.definitions
            tbody
              each k in Object.keys(properties)
                +definition(k, properties[k])
        if schema.patternProperties
          p Properties unspecified above must match the following pattern:
          table.definitions
            tbody
              each k in Object.keys(schema.patternProperties)
                +definition(k, schema.patternProperties[k])
        if example
          .example
            strong Example:
            pre: code= JSON.stringify(example, null, 2)

  for className in Object.keys(complexClasses)
    - var classDef = classes[className]
    h3 !{className.charAt(0).toUpperCase() + className.slice(1)}
    .description !{classDef.description}
    - var headers = []
    for formatName in Object.keys(classDef.formats)
      - var formatDef = classDef.formats[formatName]
        for formatField in Object.keys(formatDef)
          - headers.push(formatField)
    - headers = headers.filter(function(el,i,a){if(i==a.indexOf(el))return 1;return 0})
    - headers.sort(function(a,b){if(a==='description')return -1;if(a==='type')return -1;return a.localeCompare(b);})
    table.definitions
      tbody
        for formatName in Object.keys(classDef.formats)
          - var name = className + '/' + formatName
          - var formatDef = classDef.formats[formatName]
          +definition(name, formatDef)

  h2 Numerical types

  for className in Object.keys(numericalClasses)
    - var classDef = numericalClasses[className]
    h3 !{className.charAt(0).toUpperCase() + className.slice(1)}
    .description !{classDef.description}

    table.definitions
      tbody
        for formatName in Object.keys(classDef.formats)
          - var formatDef = classDef.formats[formatName]
          - var formatDescription = formatDef.description
          tr
            th: code !{className}/!{formatName}
            td !{formatDescription}
