openapi: 3.0.0
info:
  description: Description of Pryv.io API in Open API 3.0 standard format
  version: 1.0.0
  title: Open API Pryv
  termsOfService: http://pryv.com/pryv-lab-terms-of-use/
  contact:
    email: hsupport@pryv.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /auth/login:
    post:
      description: >-
        Authenticates the user against the provided credentials, opening a
        personal access session. This is one of the only API methods that do not
        expect an [auth parameter](#basics-authentication).   

        This method requires that the `appId` and `Origin` (or `Referer`) header comply with the [trusted app verification](#basics-trusted-apps-verification).
      operationId: auth.login
      parameters: []
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: string
                  - $ref: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: The user's username.
                  type: string
                password:
                  description: The user's password.
                  type: string
                appId:
                  description: Your app's unique identifier.
                  type: string
  /auth/logout:
    post:
      description: Terminates a personal access session by invalidating its access token
        (the user will have to login again).
      operationId: auth.logout
      parameters: []
      responses:
        - "200": {}
  /events:
    get:
      description: Queries accessible events.
      operationId: events.get
      parameters:
        - name: fromTime
          description: The start time of the timeframe you want to retrieve events for.
            Default is 24 hours before `toTime` if the latter is set; otherwise
            it is not taken into account.
          required: false
          in: query
        - name: toTime
          description: "The end time of the timeframe you want to retrieve events for.
            Default is the current time. Note: events are considered to be
            within a given timeframe based on their `time` only (`duration` is
            not considered)."
          required: false
          in: query
        - name: streams
          description: If set, only events assigned to the specified streams and their
            sub-streams will be returned. By default, all accessible events are
            returned regardless of their stream.
          required: false
          in: query
        - name: tags
          description: If set, only events assigned to any of the listed tags will be
            returned.
          required: false
          in: query
        - name: types
          description: If set, only events of any of the listed types will be returned.
          required: false
          in: query
        - name: running
          description: If `true`, only running period events will be returned.
          required: false
          in: query
        - name: sortAscending
          description: "If `true`, events will be sorted from oldest to newest. Default:
            false (sort descending)."
          required: false
          in: query
        - name: skip
          description: The number of items to skip in the results.
          required: false
          in: query
        - name: limit
          description: The number of items to return in the results. A default value of 20
            items is used if no other range limiting parameter is specified
            (`fromTime`, `toTime`).
          required: false
          in: query
        - name: state
          description: Indicates what items to return depending on their state. By default,
            only items that are not in the trash are returned; `trashed` returns
            only items in the trash, while `all` return all items regardless of
            their state.
          required: false
          in: query
        - name: modifiedSince
          description: If specified, only events modified since that time will be returned.
          required: false
          in: query
        - name: includeDeletions
          description: Whether to include event deletions since `modifiedSince` for sync
            purposes (only applies when `modifiedSince` is set). Defaults to
            `false`.
          required: false
          in: query
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - type: array
                    items: "[events](#data-structure-event)"
                  - type: array
                    items: "[item deletions](#data-structure-item-deletion)"
    post:
      description: >-
        Records a new event. It is recommended that events recorded this way are
        completed events, i.e. either period events with a known duration or
        mark events. To start a running period event, use [Start
        period](#methods-events-events-start) instead.


        In addition to JSON, this request accepts standard multipart/form-data content to support the creation of event with attached files in a single request. When sending a multipart request, one content part must hold the JSON for the new event and all other content parts must be the attached files.
      operationId: events.create
      parameters: []
      responses:
        - "201":
            content:
              application/json:
                schema:
                  - $ref: "[event](#data-structure-event)"
                  - $ref: "[identifier](#data-structure-identifier)"
        - "400":
            description: invalid-operation
        - "400":
            description: periods-overlap
      requestBody:
        id: event
        title: Event
        description: "See also: [core concepts](/concepts/#events)."
        properties:
          - key: id
            type: "[identifier](#data-structure-identifier)"
            unique: true
            readOnly: (except at creation)
            description: The identifier ([collision-resistant cuid](https://usecuid.org/))
              for the event. Automatically generated if not set when creating
              the event.
          - key: streamId
            type: "[identifier](#data-structure-identifier)"
            description: The id of the belonging stream.
          - key: time
            type: "[timestamp](#data-structure-timestamp)"
            description: The event's time. For period events, this is the time the event
              started. Automatically set to the server time if not provided when
              creating the event.
          - key: duration
            type: "[timestamp](#data-structure-timestamp)"
            optional: true
            description: If present and non-zero, indicates that the event is a period
              event. **Running period events have a duration set to `null`**.
              **A duration set to zero is equivalent to no duration**. (We use a
              dedicated field for duration—instead of using the `content`
              field—as we do specific processing of event durations, intervals
              and overlapping.)
          - key: type
            type: string
            description: The type of the event. See the [event type
              directory](/event-types/#directory) for a list of standard types.
          - key: content
            type: any type
            optional: true
            description: The `type`-specific content of the event, if any.
          - key: tags
            type: array of strings
            optional: (always present in read items)
            description: The tags associated with the event.
          - key: description
            type: string
            optional: true
            description: User description or comment for the event.
          - key: attachments
            type: array of attachment objects
            optional: true
            readOnly: true
            description: "An array describing the files attached to the event. Each item
              has the following structure:"
            properties:
              - key: id
                type: "[identifier](#data-structure-identifier)"
                description: The file's id. The attached file's URL is obtained by
                  appending this id to the event's resource URL.
              - key: fileName
                type: string
                description: The file's name as uploaded.
              - key: type
                type: string
                description: The MIME type of the file.
              - key: size
                type: number
                description: The size of the file, in bytes.
              - key: readToken
                type: string
                description: The auth token to pass in the query string when reading the
                  file (instead of the regular `auth` parameter). The token is
                  unique for the file and the access used to read it. This is a
                  security measure in situations where it is impractical to use
                  the `Authorization` HTTP header and/or where the file's URL is
                  likely to be exposed. See also events method [get
                  attachment](#methods-events-events-getAttachment).
          - key: clientData
            type: "[key-value](#data-structure-key-value)"
            optional: true
            description: Additional client data for the event.
          - key: trashed
            type: boolean
            optional: true
            description: "`true` if the event is in the trash."
          - key: created
            type: "[timestamp](#data-structure-timestamp)"
            readOnly: true
            description: The time the event was created.
          - key: createdBy
            type: "[identifier](#data-structure-identifier)"
            readOnly: true
            description: The id of the access used to create the event.
          - key: modified
            type: "[timestamp](#data-structure-timestamp)"
            readOnly: true
            description: The time the event was last modified.
          - key: modifiedBy
            type: "[identifier](#data-structure-identifier)"
            readOnly: true
            description: The id of the last access used to modify the event.
        examples:
          - title: A picture
            content:
              id: ck3ygocpi000ycfpvx3kmr9dg
              time: 1575893888.982
              streamId: diary
              tags: []
              type: picture/attached
              content: null
              attachments:
                - id: ck3ygocpi000zcfpv1a5layrv
                  fileName: photo.jpg
                  type: image/jpeg
                  size: 2561
                  readToken: ck3ygocpi0010cfpvs9sf7o9b-yMXfuGNnPiB0G56pfUfUekLNJv4
              created: 1575893888.982
              createdBy: ck3ygocoq0004cfpvh228n0ga
              modified: 1575893888.982
              modifiedBy: ck3ygocoq0004cfpvh228n0ga
          - title: An activity
            content:
              id: ck3ygocpi000lcfpvmkcugdno
              time: 1575897488.982
              streamId: jogging
              tags: []
              type: activity/pryv
              content: null
              created: 1575897488.982
              createdBy: ck3ygocop0001cfpva6k3rqw1
              modified: 1575897488.982
              modifiedBy: ck3ygocop0001cfpva6k3rqw1
          - title: A position
            content:
              id: ck3ygocpi0011cfpvl5j2144q
              time: 1350373077.359
              streamId: diary
              tags: []
              type: position/wgs84
              content:
                latitude: 40.714728
                longitude: -73.998672
              created: 1575890288.982
              createdBy: ck3ygocoo0000cfpv5id23y0w
              modified: 1575890288.982
              modifiedBy: ck3ygocoo0000cfpv5id23y0w
  "/events/{id}":
    get:
      description: Fetches a specific event. This request is mostly used to fetch an
        event's version history, allowing to review all the modifications to an
        event's data.
      operationId: events.getOne
      parameters:
        - name: includeHistory
          description: "If `true`, the event's history will be added to the response.
            Default: false (don't include the history)."
          required: false
          in: query
        - name: id
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[event](#data-structure-event)"
                  - type: array
                    items: "[events](#data-structure-event)"
    put:
      description: Modifies the event.
      operationId: events.update
      parameters:
        - name: id
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[event](#data-structure-event)"
                  - $ref: "[identifier](#data-structure-identifier)"
        - "400":
            description: invalid-operation
        - "400":
            description: periods-overlap
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: The id of the event.
                  type: "[identifier](#data-structure-identifier)"
                update:
                  description: "New values for the event's fields: see
                    [event](#data-structure-event). All fields are optional, and
                    only modified values must be included."
                  type: object
    post:
      description: Adds one or more file attachments to the event. This request expects
        standard multipart/form-data content, with all content parts being the
        attached files.
      operationId: events.addAttachment
      parameters:
        - name: id
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[event](#data-structure-event)"
    delete:
      description: >-
        Trashes or deletes the specified event, depending on its current state:


        - If the event is not already in the trash, it will be moved to the trash (i.e. flagged as `trashed`)

        - If the event is already in the trash, it will be irreversibly deleted (including all its attached files, if any).
      operationId: events.delete
      parameters:
        - name: id
          description: The id of the event.
          required: true
          in: query
        - name: id
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[event](#data-structure-event)"
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[item deletion](#data-structure-item-deletion)"
  /events/start:
    post:
      description: >-
        Starts a new period event. This is equivalent to starting an event with
        a null `duration`. In `singleActivity` streams, also stops the
        previously running period event if any.


        See [Create event](#methods-events-events-create) for details.
      operationId: events.start
      parameters: []
      responses: []
  /events/stop:
    post:
      description: Stops a running period event. In `singleActivity` streams, which
        guarantee that only one event is running at any given time, that event
        is automatically determined; for regular streams, the event to stop (or
        its type) must be specified.
      operationId: events.stop
      parameters: []
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[identifier](#data-structure-identifier)"
        - "400":
            description: invalid-operation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                streamId:
                  description: The id of the `singleActivity` stream in which to stop the
                    running event. Either this or `id` must be specified.
                  type: "[identifier](#data-structure-identifier)"
                id:
                  description: The id of the event to stop. Either this or `streamId` (and
                    possibly `type`) must be specified.
                  type: "[identifier](#data-structure-identifier)"
                type:
                  description: The type of the event to stop. `streamId` must be specified
                    as well. If there are multiple running events matching, the
                    closest one (by time) will be stopped.
                  type: string
                time:
                  description: "The stop time. Default: now."
                  type: "[timestamp](#data-structure-timestamp)"
  "/events/{id}/{fileId}[/{fileName}]":
    get:
      description: >-
        Gets the attached file. Accepts an arbitrary filename path suffix
        (ignored) for easier link readability.

        For this function using the `auth` query parameter is not accepted. You can either use the [access token](#data-structure-access) in the `Authorization` header or provide the `readToken` as query parameter.
      operationId: events.getAttachment
      parameters:
        - name: readToken
          description: Required if not using the `Authorization` HTTP header. The file read
            token to authentify the request. See
            [`event.attachments[].readToken`](#data-structure-event) for more
            info.
          required: true
          in: query
        - name: id
        - name: fileId
        - name: fileName
      responses:
        - "200":
            description: OK
  "/events/{id}/{fileId}":
    delete:
      description: Irreversibly deletes the attached file.
      operationId: events.deleteAttachment
      parameters:
        - name: id
          description: The id of the event.
          required: true
          in: query
        - name: fileId
          description: The id of the attached file.
          required: true
          in: query
        - name: id
        - name: fileId
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[event](#data-structure-event)"
  /streams:
    get:
      description: Gets the accessible streams hierarchy.
      operationId: streams.get
      parameters:
        - name: parentId
          description: "The id of the parent stream from which to retrieve streams.
            Default: `null` (returns all accessible streams from the root
            level)."
          required: false
          in: query
        - name: state
          description: By default, only items that are not in the trash are returned; `all`
            return all items regardless of their state.
          required: false
          in: query
        - name: includeDeletionsSince
          description: Whether to include stream deletions since that time for sync
            purposes.
          required: false
          in: query
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - type: array
                    items: "[streams](#data-structure-stream)"
                  - type: array
                    items: "[item deletions](#data-structure-item-deletion)"
    post:
      description: Creates a new stream.
      operationId: streams.create
      parameters: []
      responses:
        - "201":
            content:
              application/json:
                schema:
                  - $ref: "[stream](#data-structure-stream)"
        - "400":
            description: item-already-exists
        - "400":
            description: invalid-item-id
      requestBody:
        id: stream
        title: Stream
        description: "See also: [core concepts](/concepts/#streams)."
        properties:
          - key: id
            type: "[identifier](#data-structure-identifier)"
            unique: true
            readOnly: (except at creation)
            description: The identifier for the stream. Automatically generated if not set
              when creating the stream; **slugified if necessary**.
          - key: name
            type: string
            unique: among siblings
            description: A name identifying the stream for users. The name must be unique
              among the stream's siblings in the streams tree structure.
          - key: parentId
            type: "[identifier](#data-structure-identifier)"
            optional: true
            description: The identifier of the stream's parent, if any. A value of `null`
              indicates that the stream has no parent (i.e. root stream).
          - key: singleActivity
            type: boolean
            optional: true
            description: If specified and `true`, the system will ensure that period events
              in this stream and its children never overlap.
          - key: clientData
            type: "[key-value](#data-structure-key-value)"
            optional: true
            description: Additional client data for the stream.
          - key: children
            type: array of streams
            readOnly: true
            description: "The stream's sub-streams, if any. This field cannot be set in
              requests creating a new streams: streams are created individually
              by design."
          - key: trashed
            type: boolean
            optional: true
            description: "`true` if the stream is in the trash."
          - key: created
            type: "[timestamp](#data-structure-timestamp)"
            readOnly: true
            description: The time the stream was created.
          - key: createdBy
            type: "[identifier](#data-structure-identifier)"
            readOnly: true
            description: The id of the access used to create the stream.
          - key: modified
            type: "[timestamp](#data-structure-timestamp)"
            readOnly: true
            description: The time the stream was last modified.
          - key: modifiedBy
            type: "[identifier](#data-structure-identifier)"
            readOnly: true
            description: The id of the last access used to modify the stream.
        examples:
          - title: A structure for activities
            content:
              - id: sport
                name: Sport
                parentId: null
                children:
                  - id: jogging
                    name: Jogging
                    parentId: sport
                    children: []
                    created: 1512783586.7334087
                    createdBy: ck3ygocoo0000cfpv5id23y0w
                    modified: 1512783680.3107934
                    modifiedBy: ck3ygocoo0000cfpv5id23y0w
                  - id: bicycling
                    name: Bicycling
                    parentId: sport
                    children: []
                    created: 1512783586.7334087
                    createdBy: ck3ygocoo0000cfpv5id23y0w
                    modified: 1512783947.7260516
                    modifiedBy: ck3ygocoo0000cfpv5id23y0w
                created: 1512783584.982
                createdBy: ck3ygocoo0000cfpv5id23y0w
                modified: 1512783853.4886832
                modifiedBy: ck3ygocoo0000cfpv5id23y0w
              - id: work
                name: Work
                parentId: null
                singleActivity: true
                children:
                  - id: ck3ygocph000acfpvkhfi0et1
                    name: Noble Works Co.
                    parentId: work
                    children:
                      - id: ck3ygocph000ccfpvupa1fc48
                        name: Last Be First
                        parentId: ck3ygocph000acfpvkhfi0et1
                        children: []
                        created: 1512783611.7632134
                        createdBy: ck3ygocoo0000cfpv5id23y0w
                        modified: 1512783791.1199565
                        modifiedBy: ck3ygocoo0000cfpv5id23y0w
                      - id: ck3ygocph000dcfpv3c4m6ops
                        name: Big Tree
                        parentId: ck3ygocph000acfpvkhfi0et1
                        children: []
                        created: 1512783611.7632134
                        createdBy: ck3ygocoo0000cfpv5id23y0w
                        modified: 1512783710.2618814
                        modifiedBy: ck3ygocoo0000cfpv5id23y0w
                      - id: ck3ygocph000ecfpvv7d4n0ik
                        name: Inner Light
                        parentId: ck3ygocph000acfpvkhfi0et1
                        children: []
                        created: 1512783611.7632134
                        createdBy: ck3ygocoo0000cfpv5id23y0w
                        modified: 1512783784.7185655
                        modifiedBy: ck3ygocoo0000cfpv5id23y0w
                    created: 1512783599.092737
                    createdBy: ck3ygocoo0000cfpv5id23y0w
                    modified: 1512783928.0347672
                    modifiedBy: ck3ygocoo0000cfpv5id23y0w
                  - id: ck3ygocph000bcfpv5drufeq6
                    name: Freelancing
                    parentId: work
                    children:
                      - id: ck3ygocph000fcfpvsnyx2znv
                        name: Funky Veggies
                        parentId: ck3ygocph000bcfpv5drufeq6
                        children: []
                        created: 1512783624.2005987
                        createdBy: ck3ygocoo0000cfpv5id23y0w
                        modified: 1512783905.5533237
                        modifiedBy: ck3ygocoo0000cfpv5id23y0w
                      - id: ck3ygocph000gcfpvk3m213v2
                        name: Jojo Lapin & sons
                        parentId: ck3ygocph000bcfpv5drufeq6
                        children: []
                        created: 1512783624.2005987
                        createdBy: ck3ygocoo0000cfpv5id23y0w
                        modified: 1512783861.2253964
                        modifiedBy: ck3ygocoo0000cfpv5id23y0w
                    created: 1512783599.092737
                    createdBy: ck3ygocoo0000cfpv5id23y0w
                    modified: 1512783856.1799126
                    modifiedBy: ck3ygocoo0000cfpv5id23y0w
                created: 1512783584.982
                createdBy: ck3ygocoo0000cfpv5id23y0w
                modified: 1512783653.242782
                modifiedBy: ck3ygocoo0000cfpv5id23y0w
  "/streams/{id}":
    put:
      description: Modifies the stream.
      operationId: streams.update
      parameters:
        - name: id
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[stream](#data-structure-stream)"
        - "400":
            description: item-already-exists
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: The id of the stream.
                  type: "[identifier](#data-structure-identifier)"
                update:
                  description: "New values for the stream's fields: see
                    [stream](#data-structure-stream). All fields are optional,
                    and only modified values must be included."
                  type: object
    delete:
      description: >-
        Trashes or deletes the specified stream, depending on its current state:


        - If the stream is not already in the trash, it will be moved to the trash (i.e. flagged as `trashed`)

        - If the stream is already in the trash, it will be irreversibly deleted with its descendants (if any). If events exist that refer to the deleted item(s), you must indicate how to handle them with the parameter `mergeEventsWithParent`.
      operationId: streams.delete
      parameters:
        - name: id
          description: The id of the stream.
          required: true
          in: query
        - name: mergeEventsWithParent
          description: Required if actually deleting the item and if it (or any of its
            descendants) has linked events, ignored otherwise. If `true`, the
            linked events will be assigned to the parent of the deleted item; if
            `false`, the linked events will be deleted.
          required: true
          in: query
        - name: id
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[stream](#data-structure-stream)"
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[item deletion](#data-structure-item-deletion)"
  /accesses:
    get:
      description: |-
        Gets manageable accesses. Only returns accesses that can
        be managed by the requesting access and that are active when
        making the request. To include accesses that have expired, use
        the `includeExpired` parameter.
      operationId: accesses.get
      parameters:
        - name: includeExpired
          description: If `true`, also includes expired accesses. Defaults to `false`.
          required: false
          in: query
        - name: includeDeletions
          description: If `true`, also includes deleted accesses. Defaults to `false`.
          required: false
          in: query
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - type: array
                    items: "[accesses](#data-structure-access)"
                  - type: array
                    items: deleted [accesses](#data-structure-access)
    post:
      description: Creates a new access. You can only create accesses whose permissions are
        a subset of those granted to your own access token.
      operationId: accesses.create
      parameters: []
      responses:
        - "201":
            content:
              application/json:
                schema:
                  - $ref: "[access](#data-structure-access)"
        - "400":
            description: invalid-item-id
      requestBody:
        id: access
        title: Access
        description: "See also: [core concepts](/concepts/#accesses)."
        properties:
          - key: id
            type: "[identifier](#data-structure-identifier)"
            unique: true
            readOnly: true
            description: The identifier for the access.
          - key: token
            type: string
            unique: true
            readOnly: (except at creation)
            description: The token identifying the access. Automatically generated if not
              set when creating the access; **slugified if necessary**.
          - key: type
            type: "`personal`|`app`|`shared`"
            readOnly: (except at creation)
            optional: true
            description: "The type — or usage — of the access. Default: `shared`."
          - key: name
            type: string
            unique: per type and device
            description: The name identifying the access for the user. (For personal and
              app access, the name is used as a technical identifier and not
              shown as-is to the user.)
          - key: deviceName
            type: string
            optional: true
            unique: per type and name
            description: For app accesses only. The name of the client device running the
              app, if applicable.
          - key: permissions
            type: array of permission objects
            description: 'Ignored for personal accesses. If permission levels conflict
              (e.g. stream set to "manage" and child stream set to
              "contribute"), only the highest level is considered. Each
              permission object has the following structure:'
            properties:
              - key:
                  - streamId
                  - tag
                type: "[identifier](#data-structure-identifier) | string"
                description: The id of the stream or the tag the permission applies to, or
                  `*` for all streams/tags. Stream permissions are recursively
                  applied to child streams.
              - key: level
                type: "`read`|`contribute`|`manage`"
                description: The level of access to the stream. With `contribute`, one can
                  see and record events for the stream/tag (and child streams
                  for stream permissions); with `manage`, one can in addition
                  create, modify and delete child streams.
          - key: lastUsed
            type: "[timestamp](#data-structure-timestamp)"
            optional: true
            readOnly: true
            description: The time the access was last used.
          - key: expireAfter
            type: number
            optional: true
            readOnly: false
            description: >-
              (Only on create and update) If set, controls access expiry in
              seconds.

              When given a number in this attribute (positive or zero),

              the access will expire (and not be accessible any more) after this many

              seconds.


              Use `expireAfter=0` to immediately disable an access (without deleting it).
          - key: expires
            type: "[timestamp](#data-structure-timestamp)"
            optional: true
            readOnly: true
            description: >-
              If the access was set to expire: The timestamp after which the
              access

              will be deactivated.
          - key: deleted
            type: "[timestamp](#data-structure-timestamp)"
            optional: true
            readOnly: true
            description: "If the access has been deleted: The timestamp of the deletion."
          - key: clientData
            type: "[key-value](#data-structure-key-value)"
            optional: true
            description: Additional client data for the access.
          - key: created
            type: "[timestamp](#data-structure-timestamp)"
            readOnly: true
            description: The time the access was created.
          - key: createdBy
            type: "[identifier](#data-structure-identifier)"
            readOnly: true
            description: The id of the access used to create the access.
          - key: modified
            type: "[timestamp](#data-structure-timestamp)"
            readOnly: true
            description: The time the access was last modified.
          - key: modifiedBy
            type: "[identifier](#data-structure-identifier)"
            readOnly: true
            description: The id of the last access used to modify the access.
        examples:
          - title: An app access
            content:
              id: ck3ygocop0001cfpva6k3rqw1
              token: ck3ygocoq0003cfpvtgejp8he
              type: app
              name: my-app-id
              permissions:
                - streamId: health
                  level: contribute
              created: 1575811088.954
              createdBy: ck3ygocoo0000cfpv5id23y0w
              modified: 1575811088.954
              modifiedBy: ck3ygocoo0000cfpv5id23y0w
  "/accesses/{id}":
    delete:
      description: Deletes the specified access. You can only delete accesses whose
        permissions are a subset of those granted to your own access token.
      operationId: accesses.delete
      parameters:
        - name: id
          description: The id of the access.
          required: true
          in: query
        - name: id
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[item deletion](#data-structure-item-deletion)"
  /accesses/check-app:
    post:
      description: For the app authorization process. Checks if the app requesting
        authorization already has access with the same permissions (and on the
        same device, if applicable), and returns details of the requested
        permissions' streams (for display) if not.
      operationId: accesses.checkApp
      parameters: []
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - type: array
                    items: permission request objects
                  - $ref: "[access](#data-structure-access)"
                  - $ref: "[access](#data-structure-access)"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestingAppId:
                  description: The id of the app requesting authorization.
                  type: string
                deviceName:
                  description: The name of the device running the app requesting
                    authorization, if applicable.
                  type: string
                requestedPermissions:
                  description: An array of permission request objects, which are identical
                    to stream permission objects of
                    [accesses](#data-structure-access) except that each stream
                    permission object must have a `defaultName` property
                    specifying the name the stream should be created with later
                    if missing.
                  type: array of permission request objects
  /audit/logs:
    get:
      description: >-
        Fetches accessible audit logs.

        By default, only returns logs that involve the access corresponding to the provided authorization token (self-auditing).
      operationId: audit.get
      parameters:
        - name: accessId
          description: >-
            The id of a specific access to audit.

            When specified, it fetches the audit logs that involve the matching access instead of the one used to authenticate this call.

            It has to correspond to a sub-access (expired and deleted included) in regards to the provided authorization token.
          required: false
          in: query
        - name: fromTime
          description: |-
            The start time of the timeframe you want to retrieve audit logs for.
            Timestamps are considered with a day precision.
          required: false
          in: query
        - name: toTime
          description: |-
            The end time of the timeframe you want to retrieve audit logs for.
            Timestamps are considered with a day precision.
          required: false
          in: query
        - name: status
          description: >-
            Filters audit logs by HTTP response status, a 3-digits number.

            It is possible to provide only the first digit,

            in which case the two unspecified digits will be wildcarded.

            For example, `status=4` will return all logs with status between 400 and 499.
          required: false
          in: query
        - name: ip
          description: Filters audit logs by client IP address present in the
            `forwardedFor` property.
          required: false
          in: query
        - name: httpVerb
          description: Filters audit logs by HTTP verb present in the `action` property.
          required: false
          in: query
        - name: resource
          description: Filters audit logs by API resource present in the `action` property.
          required: false
          in: query
        - name: errorId
          description: Filters audit logs by error id.
          required: false
          in: query
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - type: array
                    items: "[Audit logs](#data-structure-audit-log)"
        - "403":
            description: forbidden
  /webhooks:
    get:
      description: Gets manageable webhooks. Only returns webhooks that were created by the
        access, unless you are using a personal access which returns all
        existing webhooks in the user's account.
      operationId: webhooks.get
      parameters: []
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - type: array
                    items: "[webhooks](#data-structure-webhook)"
    post:
      description: Creates a new webhook. You can only create webhooks with app accesses.
      operationId: webhooks.create
      parameters: []
      responses:
        - "201":
            content:
              application/json:
                schema:
                  - $ref: "[webhook](#data-structure-webhook)"
      requestBody:
        id: webhook
        title: Webhook
        description: >+
          Webhooks provide push notifications to web servers using HTTP POST
          requests.  


          Once created, they will run, executing a HTTP POST request to the provided URL for each [data change](#with-webhooks) in the user account. 


          When the webhooks service is booted, it will send a `webhooksServiceBoot` message to all active webhooks. This allows to query the API for potentially missed notifications during its down time.


          Only the app access used to create the webhook or a personal access can retrieve and modify it. This is meant to separate the responsibilities between the actor that sets the webhooks and the one(s) that consume the data following the webhook setup.

        properties:
          - key: id
            type: "[identifier](#data-structure-identifier)"
            readOnly: true
            description: The identifier of the Webhook.
          - key: accessId
            type: "[identifier](#data-structure-identifier)"
            readOnly: true
            description: The identifier of the access that was used to create the Webhook.
          - key: url
            type: string
            unique: per app access
            readOnly: (except at creation)
            description: >-
              The URL where the HTTP POST requests will be made. To identify the
              source of the webhook on your notifications server, you can use
              the `url`'s hostname, path or query parameters. For example: 


              ```json

              {
                "url": "https://${username}.my-notifications.com/${my-secret}/?param1=value1&param2=value2"
              }

              ```
          - key: minIntervalMs
            type: number
            readOnly: true
            description: "The webhooks run rate is throttled by a minimum interval between
              HTTP calls in milliseconds, sending an array of changes that
              occured during this period. Its value is set by the platform
              admin. "
          - key: maxRetries
            type: number
            readOnly: true
            description: In case of failure to send a request, the webhook will retry
              `maxRetries` times at a growing interval of time before becoming
              `inactive` after too many successive failures. Its value is set by
              the platform admin.
          - key: currentRetries
            type: number
            readOnly: true
            description: The number of retries iterations since the last failed HTTP call.
              This number is 0 if the last HTTP call was successful.
          - key: state
            type: "`active`|`inactive`"
            description: The current state of the Webhook. An inactive Webhook will not
              make any HTTP call when changes occur. It must be activated using
              the [update webhook](#methods-webhooks-webhooks-update) method.
          - key: runCount
            type: number
            readOnly: true
            description: The number of times the Webhook has been run, including failures.
          - key: failCount
            type: number
            readOnly: true
            description: The number of times the Webhook has failed HTTP calls. Failed runs
              are HTTP requests that received a response with a status outside
              of the 200-299 range or no response at all.
          - key: lastRun
            type: Run object
            readOnly: true
            description: Represents the last Webhook call, comprised of its HTTP response
              status and timestamp.
            properties:
              - key: status
                type: number
                description: The HTTP response status of the call.
              - key: timestamp
                type: "[timestamp](#data-structure-timestamp)"
                description: The time the call was started.
          - key: runs
            type: array of Run objects
            readOnly: true
            description: "Array of Run objects in inverse chronological order (newest
              first) which allows to monitor a webhook's health. Its length is
              set by the platform admin. "
          - key: created
            type: "[timestamp](#data-structure-timestamp)"
            readOnly: true
            description: The time the webhook was created.
          - key: createdBy
            type: "[identifier](#data-structure-identifier)"
            readOnly: true
            description: The id of the access used to create the webhook.
          - key: modified
            type: "[timestamp](#data-structure-timestamp)"
            readOnly: true
            description: The time the webhook was last modified.
          - key: modifiedBy
            type: "[identifier](#data-structure-identifier)"
            readOnly: true
            description: The id of the last access used to modify the webhook.
        examples:
          - title: A simple Webhook
            content:
              id: ck3ygocpk001bcfpv82zro7y0
              accessId: ck3ygocpk0019cfpva7221gan
              url: https://notifications.service.com/pryv
              minIntervalMs: 5000
              maxRetries: 5
              currentRetries: 0
              state: active
              runCount: 2
              failCount: 0
              lastRun:
                status: 200
                timestamp: 1575893888.984
              runs:
                - status: 200
                  timestamp: 1575893888.984
                - status: 200
                  timestamp: 1575890288.984
              created: 1575811088.984
              createdBy: ck3ygocpk0019cfpva7221gan
              modified: 1575811088.984
              modifiedBy: ck3ygocpk0019cfpva7221gan
  "/webhooks/{id}":
    get:
      description: Fetches a specific webhook. Only returns a webhook if it was created by
        the access, unless you are using a personal access which is allowed to
        fetch any existing webhook in the user's account.
      operationId: webhooks.getOne
      parameters:
        - name: id
          description: The id of the webhook.
          required: true
          in: query
        - name: id
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[webhook](#data-structure-webhook)"
    put:
      description: >-
        Modifies the webhook. You can only modify webhooks with the app access
        that was used to create them, unless you are using a personal token.  

        Updating the `state` to `active` resets the `currentRetries` counter.
      operationId: webhooks.update
      parameters:
        - name: id
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[webhook](#data-structure-webhook)"
        - "400":
            description: item-already-exists
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: The id of the webhook.
                  type: "[identifier](#data-structure-identifier)"
                update:
                  description: "New values for the webhook's fields: see
                    [webhook](#data-structure-webhook). All fields are optional,
                    and only modified values must be included.  "
                  type: object
    delete:
      description: Deletes the specified webhook. You can only delete webhooks with the app
        access that was used to create them, unless you are using a personal
        token.
      operationId: webhooks.delete
      parameters:
        - name: id
          description: The id of the webhook.
          required: true
          in: query
        - name: id
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[item deletion](#data-structure-item-deletion)"
  "/webhooks/{id}/test":
    post:
      description: Sends a post request containing a message called `test` to the URL of
        the specified webhook's `url`. You can only test webhooks with the app
        access that was used to create them, unless you are using a personal
        token.
      operationId: webhooks.test
      parameters:
        - name: id
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[webhook](#data-structure-webhook)"
        - "400":
            description: unknown-referenced-resource
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: The id of the webhook.
                  type: "[identifier](#data-structure-identifier)"
  /followed-slices:
    get:
      description: Gets followed slices.
      operationId: followedSlices.get
      parameters: []
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - type: array
                    items: "[followed slices](#data-structure-followed-slice)"
    post:
      description: Creates a new followed slice.
      operationId: followedSlices.create
      parameters: []
      responses:
        - "201":
            content:
              application/json:
                schema:
                  - $ref: "[followed slice](#data-structure-followed-slice)"
      requestBody:
        id: followed-slice
        title: Followed slice
        trustedOnly: true
        description: "See also: [core concepts](/concepts/#followed-slices)."
        properties:
          - key: id
            type: "[identifier](#data-structure-identifier)"
            unique: true
            readOnly: true
            description: The server-assigned identifier for the followed slice.
          - key: name
            type: string
            unique: true
            description: A name identifying the followed slice for the user.
          - key: url
            type: URL
            description: The URL of the API endpoint of the account hosting the slice. Not
              modifiable after creation.
          - key: accessToken
            type: string
            description: The token of the shared access itself. Not modifiable after
              creation.
        examples: []
  "/followed-slices/{id}":
    put:
      description: Modifies the specified followed slice.
      operationId: followedSlices.update
      parameters:
        - name: id
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[followed slice](#data-structure-followed-slice)"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: The id of the followed slice.
                  type: "[identifier](#data-structure-identifier)"
                update:
                  description: "New values for the followed slice's fields: see [followed
                    slice](#data-structure-followed-slice). All fields are
                    optional, and only modified values must be included."
                  type: object
    delete:
      description: Deletes the specified followed slice.
      operationId: followedSlices.delete
      parameters:
        - name: id
          description: The id of the followed slice.
          required: true
          in: query
        - name: id
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[item deletion](#data-structure-item-deletion)"
  /profile/public:
    get:
      description: Gets the user's public profile set, which contains the information the
        user makes publicly available (e.g. avatar image). Available to all
        accesses.
      operationId: profile.getPublic
      parameters: []
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: object
  /profile/app:
    get:
      description: Gets the app's dedicated user profile set, which contains app-level
        settings for the user. Available to app accesses.
      operationId: profile.getApp
      parameters: []
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: object
    put:
      description: |-
        Adds, updates or delete app profile keys.

        - To add or update a key, just set its value
        - To delete a key, set its value to `null`

        Existing keys not included in the update are left untouched.
      operationId: profile.updateApp
      parameters: []
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                update:
                  description: An object with the desired key changes (see above).
                  type: object
  "/profile/{id}":
    get:
      description: Gets the specified user profile set.
      operationId: profile.get
      parameters:
        - name: id
          description: The id of the profile set.
          required: true
          in: query
        - name: id
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: object
    put:
      description: |-
        Adds, updates or delete profile keys.

        - To add or update a key, just set its value
        - To delete a key, set its value to `null`

        Existing keys not included in the update are left untouched.
      operationId: profile.update
      parameters:
        - name: id
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: The id of the profile set.
                  type: "[identifier](#data-structure-identifier)"
                update:
                  description: An object with the desired key changes (see above).
                  type: object
  /account:
    get:
      description: Retrieves the user's account information.
      operationId: account.get
      parameters: []
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[account information](#data-structure-account)"
    put:
      description: Modifies the user's account information.
      operationId: account.update
      parameters: []
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: "[account information](#data-structure-account)"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                update:
                  description: "New values for the account information's fields: see
                    [account information](#data-structure-account). All fields
                    are optional, and only modified values must be included."
                  type: object
  /account/change-password:
    post:
      description: Modifies the user's password.
      operationId: account.changePassword
      parameters: []
      responses:
        - "200": {}
        - "400":
            description: invalid-operation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  description: The current password.
                  type: string
                newPassword:
                  description: The new password.
                  type: string
  /account/request-password-reset:
    post:
      description: >-
        Requests the resetting of the user's password. An e-mail containing an
        expiring reset token (e.g. in a link) will be sent to the user.  

        This method requires that the `appId` and `Origin` (or `Referer`) header comply with the [trusted app verification](#basics-trusted-apps-verification).
      operationId: account.requestPasswordReset
      parameters: []
      responses:
        - "200": {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                appId:
                  description: Your app's unique identifier.
                  type: string
  /account/reset-password:
    post:
      description: >-
        Resets the user's password, authenticating the request with the given
        reset token (see [request password
        reset](#methods-account-account-requestPasswordReset) ).  

        This method requires that the `appId` and `Origin` (or `Referer`) header comply with the [trusted app verification](#basics-trusted-apps-verification).
      operationId: account.resetPassword
      parameters: []
      responses:
        - "200": {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resetToken:
                  description: The expiring reset token that was sent to the user after
                    requesting the password reset.
                  type: string
                newPassword:
                  description: The new password.
                  type: string
                appId:
                  description: Your app's unique identifier.
                  type: string
  /access-info:
    get:
      description: Retrieves the name, type and permissions of the access in use.
      operationId: getAccessInfo
      parameters: []
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - $ref: string
                  - $ref: "[access](#data-structure-access).type"
                  - $ref: "[access](#data-structure-access).permissions"
  /:
    post:
      description: Sends a batch of API methods calls in one go (e.g. for to syncing
        offline changes when resuming connectivity).
      operationId: callBatch
      parameters: []
      responses:
        - "200":
            content:
              application/json:
                schema:
                  - type: array
                    items: call results
      requestBody: null
